using Printf
using LinearAlgebra, Symbolics, DifferentialEquations
# using Plots; gr();
using Plots;
using Infiltrator
using Dates
using Distributions, Noise
using Measures
using LaTeXStrings
using HypothesisTests
using Pingouin


function RMSE(observed_data,prediction)
    t=observed_data
    y=prediction
    se = (t - y).^2
    mse = mean(se)
    rmse = sqrt(mse)
    return rmse
end

function RMSPE(ground_truth,estimation)
    # https://s2.smu.edu/tfomby/eco5385_eco6380/lecture/Scoring%20Measures%20for%20Prediction%20Problems.pdf
    # https://stats.stackexchange.com/questions/413249/what-is-the-correct-definition-of-the-root-mean-square-percentage-error-rmspe
    # https://www.sciencedirect.com/topics/earth-and-planetary-sciences/root-mean-square-error#:~:text=The%20RMSE%20statistic%20provides%20information,the%20better%20the%20model's%20performance.
# https://www.researchgate.net/profile/Adriaan-Brebels/publication/281718517_A_survey_of_forecast_error_measures/links/56f43b2408ae81582bf0a1a9/A-survey-of-forecast-error-measures.pdf
    mspe=mean(((ground_truth-estimation)./ground_truth).^2)
    rmspe=sqrt(mspe)
    return rmspe*100
end




# # # Symbols for symbolic math calculations
# @variables Xv Xt GLC GLN LAC AMM MAb t
#
# @variables mu_max Kglc Kgln KIlac KIamm mu_dmax Kdamm Klysis Yxglc mglc Yxgln alpha1 alpha2 Kdgln Ylacglc Yammgln r1 r2 lambda
# #
# @variables P1_1 P1_2 P1_3 P1_4 P1_5 P1_6 P1_7 P1_8
# @variables P2_1 P2_2 P2_3 P2_4 P2_5 P2_6 P2_7 P2_8
# @variables P3_1 P3_2 P3_3 P3_4 P3_5 P3_6 P3_7 P3_8
# @variables P4_1 P4_2 P4_3 P4_4 P4_5 P4_6 P4_7 P4_8
# @variables P5_1 P5_2 P5_3 P5_4 P5_5 P5_6 P5_7 P5_8
# @variables P6_1 P6_2 P6_3 P6_4 P6_5 P6_6 P6_7 P6_8
# @variables P7_1 P7_2 P7_3 P7_4 P7_5 P7_6 P7_7 P7_8
# @variables P8_1 P8_2 P8_3 P8_4 P8_5 P8_6 P8_7 P8_8
#
# P=[ P1_1 P1_2 P1_3 P1_4 P1_5 P1_6 P1_7 P1_8;
#     P2_1 P2_2 P2_3 P2_4 P2_5 P2_6 P2_7 P2_8;
#     P3_1 P3_2 P3_3 P3_4 P3_5 P3_6 P3_7 P3_8;
#     P4_1 P4_2 P4_3 P4_4 P4_5 P4_6 P4_7 P4_8;
#     P5_1 P5_2 P5_3 P5_4 P5_5 P5_6 P5_7 P5_8;
#     P6_1 P6_2 P6_3 P6_4 P6_5 P6_6 P6_7 P6_8;
#     P7_1 P7_2 P7_3 P7_4 P7_5 P7_6 P7_7 P7_8;
#     P8_1 P8_2 P8_3 P8_4 P8_5 P8_6 P8_7 P8_8]
# #
# #
# Pv = Diagonal([P1_1,P2_2,P3_3,P4_4,P5_5,P6_6,P7_7,P8_8])
#
# @variables Q1_1 Q1_2 Q1_3 Q1_4 Q1_5 Q1_6 Q1_7 Q1_8
# @variables Q2_1 Q2_2 Q2_3 Q2_4 Q2_5 Q2_6 Q2_7 Q2_8
# @variables Q3_1 Q3_2 Q3_3 Q3_4 Q3_5 Q3_6 Q3_7 Q3_8
# @variables Q4_1 Q4_2 Q4_3 Q4_4 Q4_5 Q4_6 Q4_7 Q4_8
# @variables Q5_1 Q5_2 Q5_3 Q5_4 Q5_5 Q5_6 Q5_7 Q5_8
# @variables Q6_1 Q6_2 Q6_3 Q6_4 Q6_5 Q6_6 Q6_7 Q6_8
# @variables Q7_1 Q7_2 Q7_3 Q7_4 Q7_5 Q7_6 Q7_7 Q7_8
# @variables Q8_1 Q8_2 Q8_3 Q8_4 Q8_5 Q8_6 Q8_7 Q8_8
#
# Qv = Diagonal([Q1_1,Q2_2,Q3_3,Q4_4,Q5_5,Q6_6,Q7_7,Q8_8]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
#
############### Variables / Parameters ##############

# initX = [2e8  ;  2e8 ;   29.1 ;  4.9 ; 0.0 ; 0.310; 80.6;7.21e-9] #initial condition from "Bioprocess optimization under uncertainty using ensemble modeling(2017)"
#
# initP = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,7.21e-10]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
# #(initPRows, initPColumns) = size(initP)
# initP = Matrix(initP)
# # initP[8,1]=0.0014
#
# init = [initX;initP[:]] # Combined initial value vector
#
# H = [1 0 0 0 0 0 0 0] # Observation Matrix
# Q = Diagonal([0.001,0.001,0.001,0.001, 0.001, 0.001, 0.001e7, 0.001e7]) # Process Noise Covariance Matrix
#
# mNoise =10e7
# # mNoise =54305713.6618
# # # mNoise =104000873.7021
# # mNoise = 104000873.7021 + 9679302.4834
# R = (mNoise)^2 # Measurement noise covariance matrix


############# Model ##############

# # Monod terms
# mu = mu_max*(GLC/(Kglc+GLC))*(GLN/(Kgln+GLN))*(KIlac/(KIlac+LAC))*(KIamm/(KIamm+AMM));
# mu_d = mu_dmax/(1+(Kdamm/AMM)^2);
#
# # ODE
# dS = [mu*Xv-mu_d*Xv;  #viable cell density XV
#  mu*Xv-Klysis*(Xt-Xv); #total cell density Xt
#  -(mu/Yxglc+mglc)*Xv;
#  -(mu/Yxgln+alpha1*GLN/(alpha2+GLN))*Xv - Kdgln*GLN;
#  Ylacglc*(mu/Yxglc+mglc)*Xv;
#  Yammgln*(mu/Yxgln+alpha1*GLN/(alpha2+GLN))*Xv+Kdgln*GLN;
#  (r2-r1*mu)*lambda*Xv;
#  0];
#
# # Jacobian of Model with respect to state variables
# F = Symbolics.jacobian(dS,[Xv, Xt, GLC, GLN, LAC, AMM, MAb,lambda]) # jacobian(matrix with each function separated by ';', list with the dependent variables)
# # P = initP
#
# # dP = F * P + P * F' + Q     # Defines the function dP
# dP = F * Pv + Pv * F' + Qv    # Defines the function dP for  process_model_and_MRDE_PU
# # dP = F * P + P * F' + Qv      # Defines the function dP for process_model_and_MRDE_PC
#
#
# # Simulation / State prediction and filtering
# # Replace all symbolic parameters with their respective numeric values where needed
# F = substitute(F,  Dict(mu_max=> 5.8e-2,  Kglc=> 0.75, Kgln=> 0.075, KIlac=> 171.756, KIamm=> 28.484, mu_dmax=> 3e-2, Kdamm=> 1.76, Klysis=> 0.05511, Yxglc=> 1.061e8, mglc=> 4.853e-14, Yxgln=> 5.57e8, alpha1=> 3.4e-13, alpha2=> 4, Kdgln=> 9.6e-3, Ylacglc=> 1.399, Yammgln=> 4.27e-1, r1=> 0.1, r2=> 2));
# dS= substitute(dS, Dict(mu_max=> 5.8e-2,  Kglc=> 0.75, Kgln=> 0.075, KIlac=> 171.756, KIamm=> 28.484, mu_dmax=> 3e-2, Kdamm=> 1.76, Klysis=> 0.05511, Yxglc=> 1.061e8, mglc=> 4.853e-14, Yxgln=> 5.57e8, alpha1=> 3.4e-13, alpha2=> 4, Kdgln=> 9.6e-3, Ylacglc=> 1.399, Yammgln=> 4.27e-1, r1=> 0.1, r2=> 2));
# dP= substitute(dP, Dict(mu_max=> 5.8e-2,  Kglc=> 0.75, Kgln=> 0.075, KIlac=> 171.756, KIamm=> 28.484, mu_dmax=> 3e-2, Kdamm=> 1.76, Klysis=> 0.05511, Yxglc=> 1.061e8, mglc=> 4.853e-14, Yxgln=> 5.57e8, alpha1=> 3.4e-13, alpha2=> 4, Kdgln=> 9.6e-3, Ylacglc=> 1.399, Yammgln=> 4.27e-1, r1=> 0.1, r2=> 2));
# dS= append!(dS,dP[:])
#
# #  Print the all equations to create the process_model_and_MRDE_PU and process_model_and_MRDE_PC functions below.  This make the EKF computation fast!
#
# for i=1:72
#     println("du[",i,"]=", dS[i] ,";")
# end
#
# Build the ODE function to feed the solver
# function tkftcp!(du,u,p,t) # The Kalman Filter For the Cultivation Process's equation
#   substitutionDic = merge(
#               Dict(Xv=>u[1], Xt=>u[2], GLC=>u[3], GLN=>u[4], LAC=>u[5], AMM=>u[6], MAb=>u[7],lambda=>u[8]),
#               Dict( zip(P[:],u[9:end]) )
#       )
#   du .= [substitute(someExpression,substitutionDic).val for someExpression=dS]
#   # nothing
# end




function process_model!(du, u, p, t)
    Xv, Xt, GLC, GLN, LAC, AMM, MAb = u
    mu_max, Kglc, Kgln, KIlac, KIamm, mu_dmax, Kdamm, Klysis, Yxglc, mglc, Yxgln, alpha1, alpha2, Kdgln, Ylacglc, Yammgln, r1, r2 ,lambda = p

    # mu_max  = 5.8e-2;
    # Kglc    = 0.75;
    # Kgln    = 0.075;
    # KIlac   = 171.756;
    # KIamm   = 28.484;
    #
    # mu_dmax = 3e-2;
    # Kdamm   = 1.76;

    # Klysis  = 0.05511;
    #
    # Yxglc   = 1.061e8;
    # mglc    = 4.853e-14;
    #
    # Yxgln   = 5.57e8;
    # alpha1  = 3.4e-13;
    # alpha2  = 4;
    # Kdgln   = 9.6e-3;
    #
    # Ylacglc = 1.399;
    # Yammgln = 4.27e-1;
    #
    # r1 = 0.1;
    # r2 = 2;
    # lambda = 7.21e-9;

    mu = mu_max*(GLC/(Kglc+GLC))*(GLN/(Kgln+GLN))*(KIlac/(KIlac+LAC))*(KIamm/(KIamm+AMM));
    mu_d = mu_dmax/(1+(Kdamm/AMM)^2);

    du[1] = mu*Xv-mu_d*Xv;  #viable cell density XV
    du[2] = mu*Xv-Klysis*(Xt-Xv); #total cell density Xt
    du[3] = -(mu/Yxglc+mglc)*Xv;
    du[4] = -(mu/Yxgln+alpha1*GLN/(alpha2+GLN))*Xv - Kdgln*GLN;
    du[5] = Ylacglc*(mu/Yxglc+mglc)*Xv;
    du[6] = Yammgln*(mu/Yxgln+alpha1*GLN/(alpha2+GLN))*Xv+Kdgln*GLN;
    du[7] = (r2-r1*mu)*lambda*Xv;

end
#

function process_model_and_MRDE_PU!(du, u, p, t)
        Xv, Xt, GLC, GLN, LAC, AMM, MAb, lambda, P1_1, P2_1, P3_1, P4_1, P5_1, P6_1, P7_1, P8_1, P1_2, P2_2, P3_2, P4_2, P5_2, P6_2, P7_2, P8_2, P1_3, P2_3, P3_3, P4_3, P5_3, P6_3, P7_3, P8_3, P1_4, P2_4, P3_4, P4_4, P5_4, P6_4, P7_4, P8_4, P1_5, P2_5, P3_5, P4_5, P5_5, P6_5, P7_5, P8_5, P1_6, P2_6, P3_6, P4_6, P5_6, P6_6, P7_6, P8_6, P1_7, P2_7, P3_7, P4_7, P5_7, P6_7, P7_7, P8_7, P1_8, P2_8, P3_8, P4_8, P5_8, P6_8, P7_8, P8_8 = u;
        Q1_1, Q2_2,Q3_3,Q4_4,Q5_5, Q6_6, Q7_7, Q8_8 = p;

        du[1]=(-0.03Xv) / (1 + (1.76 / AMM)^2) + (283.753278432GLC*GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC));
        du[2]=0.05511Xv - 0.05511Xt + (283.753278432GLC*GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC));
        du[3]=Xv*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14);
        du[4]=Xv*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) - 0.0096GLN;
        du[5]=1.399Xv*(4.853e-14 + (283.75327843200006GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[6]=0.0096GLN + 0.427Xv*((3.4e-13GLN) / (4 + GLN) + (283.75327843200006GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[7]=Xv*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[8]=0;
        du[9]=Q1_1 + 2P1_1*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[10]=P1_1*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[11]=P1_1*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P3_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[12]=P1_1*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[13]=1.399P1_1*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) - P5_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[14]=P6_6*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P1_1*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[15]=P1_1*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[16]=0;
        du[17]=P1_1*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[18]=Q2_2 - 0.11022P2_2;
        du[19]=P3_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[20]=P4_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[21]=-P5_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[22]=-P6_6*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[23]=0;
        du[24]=0;
        du[25]=P1_1*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P3_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[26]=P3_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[27]=Q3_3 + 2P3_3*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[28]=P4_4*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_3*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[29]=1.399P3_3*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.061e8P5_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[30]=0.427P3_3*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.061e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[31]=P3_3*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[32]=0;
        du[33]=P1_1*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[34]=P4_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[35]=P4_4*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_3*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[36]=Q4_4 + 2P4_4*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096);
        du[37]=1.399P4_4*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 5.57e8P5_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[38]=P4_4*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) - 5.57e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[39]=P4_4*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[40]=0;
        du[41]=1.399P1_1*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) - P5_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[42]=-P5_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[43]=1.399P3_3*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.061e8P5_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[44]=1.399P4_4*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 5.57e8P5_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[45]=Q5_5 - 2.968678e8P5_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[46]=-2.37839e8P5_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[47]=-P5_5*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[48]=0;
        du[49]=P6_6*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P1_1*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[50]=-P6_6*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[51]=0.427P3_3*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.061e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[52]=P4_4*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) - 5.57e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[53]=-2.37839e8P5_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[54]=Q6_6 - 4.75678e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[55]=-P6_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[56]=0;
        du[57]=P1_1*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[58]=0;
        du[59]=P3_3*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[60]=P4_4*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))));
        du[61]=-P5_5*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[62]=-P6_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[63]=Q7_7;
        du[64]=P8_8*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[65]=0;
        du[66]=0;
        du[67]=0;
        du[68]=0;
        du[69]=0;
        du[70]=0;
        du[71]=P8_8*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[72]=Q8_8;
end


function process_model_and_MRDE_PC!(du, u, p, t)
        Xv, Xt, GLC, GLN, LAC, AMM, MAb, lambda, P1_1, P2_1, P3_1, P4_1, P5_1, P6_1, P7_1, P8_1, P1_2, P2_2, P3_2, P4_2, P5_2, P6_2, P7_2, P8_2, P1_3, P2_3, P3_3, P4_3, P5_3, P6_3, P7_3, P8_3, P1_4, P2_4, P3_4, P4_4, P5_4, P6_4, P7_4, P8_4, P1_5, P2_5, P3_5, P4_5, P5_5, P6_5, P7_5, P8_5, P1_6, P2_6, P3_6, P4_6, P5_6, P6_6, P7_6, P8_6, P1_7, P2_7, P3_7, P4_7, P5_7, P6_7, P7_7, P8_7, P1_8, P2_8, P3_8, P4_8, P5_8, P6_8, P7_8, P8_8 = u;
        Q1_1, Q2_2,Q3_3,Q4_4,Q5_5, Q6_6, Q7_7, Q8_8 = p;

        du[1]=(-0.03Xv) / (1 + (1.76 / AMM)^2) + (283.753278432GLC*GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC));
        du[2]=0.05511Xv - 0.05511Xt + (283.753278432GLC*GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC));
        du[3]=Xv*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14);
        du[4]=Xv*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) - 0.0096GLN;
        du[5]=1.399Xv*(4.853e-14 + (283.75327843200006GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[6]=0.0096GLN + 0.427Xv*((3.4e-13GLN) / (4 + GLN) + (283.75327843200006GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[7]=Xv*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)));
        du[8]=0;
        du[9]=Q1_1 + P1_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P1_6*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_1*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P1_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_1*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P6_1*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 2P1_1*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) - P1_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_1*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[10]=P1_1*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P2_1*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P2_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P2_6*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_1*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P2_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_1*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P2_1 - P2_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_1*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_1*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[11]=P1_1*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P3_1*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_6*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_1*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_1*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P3_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P5_1*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P6_1*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[12]=P4_1*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P4_1*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_1*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_6*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_1*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P4_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P5_1*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P6_1*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[13]=P5_1*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P5_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P5_6*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P5_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P1_1*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P3_1*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P4_1*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P5_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P5_1*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P6_1*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[14]=P4_1*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + P6_1*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P6_6*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P6_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P6_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P1_1*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 0.427P3_1*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P6_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P6_1*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P5_1*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[15]=P7_1*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P7_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P7_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P7_6*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P8_1*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_1*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_1*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_1*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P7_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_1*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_1*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[16]=P8_1*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P8_6*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P8_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P8_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P8_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[17]=P1_1*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_2*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_2*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P6_2*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P1_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_2*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P1_2 - P1_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P1_6*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_2*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[18]=Q2_2 + P1_2*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P2_1*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P2_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_2*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P2_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_2*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.11022P2_2 - P2_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P2_6*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_2*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_2*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[19]=P1_2*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P3_1*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_2*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_2*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P3_2 - P3_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P3_6*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P5_2*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P6_2*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[20]=P4_1*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_2*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_2*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P4_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_2*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P4_2 - P4_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P4_6*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P5_2*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P6_2*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[21]=P5_1*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P5_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P5_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P1_2*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P3_2*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P4_2*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P5_2 - P5_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_6*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P5_2*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P6_2*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[22]=P4_2*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + P6_1*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P6_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P6_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P1_2*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 0.427P3_2*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P6_2 - P6_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_6*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P5_2*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P6_2*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[23]=P7_1*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P7_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P7_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P8_2*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_2*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_2*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_2*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P7_2 - P7_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P7_6*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_2*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_2*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[24]=P8_1*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P8_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P8_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P8_2 - P8_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P8_6*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[25]=P1_1*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P1_3*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_3*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P6_3*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P1_3*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P1_4*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P5_3*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P1_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P1_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[26]=P2_1*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P1_3*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_3*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_3*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P2_4*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P2_3*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P2_3 - P5_3*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_3*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P2_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P2_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[27]=Q3_3 + P1_3*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P3_1*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P3_4*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_3*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 2P3_3*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.061e8P3_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P5_3*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P3_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P6_3*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[28]=P1_3*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_3*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P4_1*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P4_4*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_3*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_3*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.061e8P4_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P4_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P5_3*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P6_3*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[29]=P5_1*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + 1.399P1_3*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P5_4*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P5_3*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P4_3*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P3_3*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.484339e8P5_3*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P5_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P5_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P6_3*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[30]=P4_3*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + P6_1*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + 0.427P1_3*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P6_3*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P6_4*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P3_3*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 2.37839e8P6_3*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P6_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P5_3*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[31]=P7_1*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P8_3*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P7_4*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P1_3*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P7_3*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_3*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_3*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.061e8P7_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P7_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_3*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_3*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[32]=P8_1*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P8_3*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P8_4*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.061e8P8_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P8_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[33]=P1_4*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P1_4*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_1*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_4*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P6_4*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P1_3*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P5_4*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P1_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P1_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[34]=P2_4*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P2_1*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_4*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_4*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_4*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P2_3*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P2_4 - P5_4*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_4*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P2_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P2_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[35]=P1_4*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P3_4*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P3_1*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_4*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_3*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_4*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 5.57e8P3_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P5_4*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P6_4*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P3_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[36]=Q4_4 + P1_4*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_1*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 2P4_4*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P3_4*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_3*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 5.57e8P4_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P5_4*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P4_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P6_4*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[37]=P5_4*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P5_1*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P1_4*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P5_3*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P4_4*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P3_4*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.484339e8P5_4*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P5_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P5_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P6_4*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[38]=P4_4*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + P6_1*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P6_4*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + 0.427P1_4*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P6_3*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P3_4*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 2.37839e8P6_4*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P5_4*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P6_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[39]=P7_1*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P7_4*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P7_3*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P1_4*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P8_4*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_4*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_4*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 5.57e8P7_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P7_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_4*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_4*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[40]=P8_1*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P8_4*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P8_3*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 5.57e8P8_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P8_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[41]=P1_5*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P6_5*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_5*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_5*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P1_1*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P1_4*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P1_3*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P5_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P1_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P1_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[42]=P1_5*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_5*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_5*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P2_1*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P2_3*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P2_4*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P2_5 - P5_5*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_5*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P2_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P2_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[43]=P1_5*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + 1.399P3_1*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_5*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_5*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P3_4*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P3_3*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.484339e8P3_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P3_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P5_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P6_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[44]=P4_5*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P1_5*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P4_1*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_5*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P4_3*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P4_4*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.484339e8P4_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P5_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P4_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P6_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[45]=Q5_5 + 1.399P1_5*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P5_1*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P3_5*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P5_3*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P4_5*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P5_4*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.484339e8P5_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P6_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.968678e8P5_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[46]=P4_5*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + 1.399P6_1*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 0.427P1_5*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P6_4*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P3_5*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P6_3*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.484339e8P6_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P5_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P6_5*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[47]=P1_5*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P8_5*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P7_1*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_5*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P7_4*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_5*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P7_3*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.484339e8P7_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P7_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_5*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_5*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[48]=1.399P8_1*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P8_4*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P8_3*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.484339e8P8_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P8_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[49]=P1_4*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + P1_6*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P6_6*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_6*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_6*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P1_1*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 0.427P1_3*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P5_6*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P1_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P1_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[50]=P1_6*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P2_4*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + P4_6*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_6*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P2_1*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 0.427P2_3*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P2_6 - P5_6*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_6*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P2_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P2_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[51]=P1_6*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P3_4*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + 0.427P3_1*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_6*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_6*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P3_3*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 2.37839e8P3_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P5_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P3_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[52]=P4_6*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P1_6*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_4*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + 0.427P4_1*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_6*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P4_3*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 5.57e8P5_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P4_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P4_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[53]=P5_4*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + 0.427P5_1*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P1_6*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P3_6*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P5_3*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P4_6*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.484339e8P5_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P5_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P5_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[54]=Q6_6 + P4_6*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + P6_4*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + 0.427P1_6*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 0.427P6_1*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 0.427P3_6*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P6_3*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 4.75678e8P6_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P5_6*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P6_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[55]=P7_4*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + P8_6*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_6*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 0.427P7_1*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_6*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_6*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P7_3*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 2.37839e8P7_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P7_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[56]=P8_4*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + 0.427P8_1*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 0.427P8_3*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 2.37839e8P8_6*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P8_5*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[57]=P1_7*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_7*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_7*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P6_7*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P1_1*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_8*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_3*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P1_4*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P5_7*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P1_5*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P1_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[58]=P1_7*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_7*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_7*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P2_1*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P2_8*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P2_4*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P2_3*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P2_7 - P5_7*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_7*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P2_5*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P2_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[59]=P1_7*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P3_1*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_7*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_8*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_7*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_3*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_4*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.061e8P5_7*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P6_7*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P3_5*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P3_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[60]=P4_7*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P1_7*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_8*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_7*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_1*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_4*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_3*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 5.57e8P5_7*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P6_7*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P4_5*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P4_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[61]=1.399P1_7*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P5_1*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P5_8*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P5_3*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P5_4*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P4_7*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P3_7*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.484339e8P5_7*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P6_7*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_5*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P5_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[62]=P4_7*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + 0.427P1_7*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P6_1*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P6_8*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P6_3*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P6_4*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 0.427P3_7*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 2.37839e8P5_7*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P6_7*Xv*(0.75 + GLC)*(0.075 + GLN)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_5*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[63]=Q7_7 + P1_7*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P7_8*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P8_7*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P7_1*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_7*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P7_3*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_7*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P7_4*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P5_7*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_7*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P7_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P7_5*Xv*lambda*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[64]=P8_8*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P8_1*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P8_4*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P8_3*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P8_6*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P8_5*Xv*lambda*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[65]=P1_8*(-0.03 / (1 + (1.76 / AMM)^2) + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_8*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_8*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P6_8*((3.52(1.76 / (AMM^2))*((-0.03Xv) / ((1 + (1.76 / AMM)^2)^2))) / AMM - (0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P5_8*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[66]=P1_8*(0.05511 + (283.75327843200006GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_8*((283.75327843200006GLC*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_8*((283.753278432GLN*Xv) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.05511P2_8 - P5_8*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_8*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN*Xv) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[67]=P1_8*((-283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 4.853e-14) + P4_8*Xv*((-283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P3_8*Xv*((-283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.061e8P5_8*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.061e8P6_8*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[68]=P1_8*((-3.4e-13GLN) / (4 + GLN) + (-283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P4_8*(Xv*(-3.4e-13 / (4 + GLN) + (-283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) + (3.4e-13GLN) / ((4 + GLN)^2) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 0.0096) + P3_8*Xv*((-283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 5.57e8P5_8*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 5.57e8P6_8*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[69]=1.399P1_8*(4.853e-14 + (283.753278432GLC*GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 1.399P4_8*Xv*((283.75327843200006GLC) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + 1.399P3_8*Xv*((283.75327843200006GLN) / (1.061e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 1.061e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 1.484339e8P5_8*Xv*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 1.484339e8P6_8*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (1.125721e16((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[70]=P4_8*(0.0096 + 0.427Xv*(3.4e-13 / (4 + GLN) + (-3.4e-13GLN) / ((4 + GLN)^2) + (283.75327843200006GLC) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))))) + 0.427P1_8*((3.4e-13GLN) / (4 + GLN) + (283.753278432GLC*GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + 0.427P3_8*Xv*((283.75327843200006GLN) / (5.57e8(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - 5.57e8(0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - 2.37839e8P6_8*Xv*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - 2.37839e8P5_8*Xv*(0.75 + GLC)*(0.075 + GLN)*(28.484 + AMM)*((283.753278432GLC*GLN) / (3.10249e17((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[71]=P8_8*Xv*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P1_8*lambda*(2 + (-28.3753278432GLC*GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC))) + P3_8*Xv*lambda*((-28.3753278432GLN) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.075 + GLN)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) + P4_8*Xv*lambda*((-28.375327843200004GLC) / ((0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)) - (0.75 + GLC)*(28.484 + AMM)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)))) - P5_8*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(28.484 + AMM)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2))) - P6_8*Xv*lambda*(0.075 + GLN)*(0.75 + GLC)*(171.756 + LAC)*((-28.3753278432GLC*GLN) / (((0.075 + GLN)^2)*((0.75 + GLC)^2)*((28.484 + AMM)^2)*((171.756 + LAC)^2)));
        du[72]=Q8_8;
end


########################## Test the the process_model_and_MRDE_PU and process_model_and_MRDE_PC functions above!
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.01, 0.01, 0.01, 0.0, 0.01, 0.01, 0.01, 0.01]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
u0 = [X0;P0[:]] # Combined initial value vector

pQ=[10.01^2,0.01^2,0.01^2,0.01^2,0.01^2,0.01^2,0.91^2,0.91^2]

tstart=0.0
tend=103.0
sampling= 7.0
tgrid=tstart:sampling:tend

prob1 = ODEProblem(process_model_and_MRDE_PC!, u0, (tstart,tend), pQ)
sol = solve(prob1,BS3(), u0=u0,tspan=(tstart,tend),p=pQ, saveat=tgrid)#, Rosenbrock23(), abstol = 1e-10, reltol = 1e-10)    # predicted1 = solve(problem, Rosenbrock23(),  u0=u0_set, p=p, saveat=tgrid,abstol = 1e-10, reltol = 1e-10)

prob1 = ODEProblem(process_model_and_MRDE_PU!, u0, (tstart,tend), pQ)
sol = solve(prob1,BS3(), u0=u0,tspan=(tstart,tend),p=pQ, saveat=tgrid)#, Rosenbrock23(), abstol = 1e-10, reltol = 1e-10)    # predicted1 = solve(problem, Rosenbrock23(),  u0=u0_set, p=p, saveat=tgrid,abstol = 1e-10, reltol = 1e-10)







 ########################## Xv noise dataset with samples every 7.5 min with white gaussian noise

online_Xv_noise_7_5min_Htiter=[2.9118196860988194e8, 3.9905428721354675e8, 2.02844601130871e8, 1.1588968018631399e8, 1.5214270998627025e8, 1.6526158448209894e8, 2.568709568665823e8, 9.3897251507085e7, 1.2979530428883874e8, 3.172201557963605e8, 9.710340895353082e7, 2.3588522937186363e8, 3.8100303008736444e8, 2.4822801408483255e8, 5.442058699244082e8, 5.482422409500711e8, 1.5026398512352902e8, 2.1606407779611808e8, 4.447932965339047e7, 2.2629936628887022e8, 3.499542190216863e8, 2.816567539845401e7, 3.890199083797349e8, 3.0082370467627376e7, 2.042462345432657e7, 2.031191918571678e8, 1.0448596734877166e8, 3.0781493718587923e8, 4.291220871060104e8, 2.877382563424659e8, 7.240749951988843e7, 1.8331740925598422e8, 3.863292394337621e8, 5.930001881627293e8, 8.582377958538687e8, 4.730005703048687e8, 2.239424505442142e8, 7.975844346663406e8, 3.849502147939765e8, 3.3999333019315755e8, 1.4687270808126524e8, 1.8648865592504597e8, 6.117697504690784e7, 1.6269768051689684e7, 9.540118146060416e7, 1.7537221649786228e8, 2.2219192889485955e7, 1.0913899762669855e8, 1.709002727332635e8, 2.320742309213179e8, 3.985617384138356e8, 2.2789117488220707e8, 3.4818901669675905e8, 3.727961435105016e8, 2.9462514764635164e8, 2.408671771121754e8, 3.088195123658309e8, 2.457100749866647e8, 4.928244975274284e8, 1.4065810406106836e8, 4.333733784577001e8, 5.550741211869489e8, 1.045390227548194e7, 6.42048076865226e8, 1.7753465772023466e8, 6.26584664453916e8, 3.6598080064395916e8, 2.666367847004349e8, 4.552803212167709e8, 8.459952150036383e8, 5.402063210823516e8, 1.819424479610381e8, 4.7695877309489906e8, 1.817895750687975e8, 3.874266370627697e8, 2.1852918057563365e8, 3.7264136745966214e8, 2.1861748402697098e8, 5.391734202566779e8, 3.9780930999550384e8, 4.173789663053827e8, 5.3070152317168605e8, 6.4283863123844445e7, 5.408768959582524e8, 2.0379994518169862e8, 2.9607130405796236e8, 3.039207865296153e8, 2.0700417150928268e8, 3.854087046360166e8, 3.7012016143146396e8, 2.4557559900918975e8, 2.4840424347698468e8, 7.190509697347634e8, 2.9923305337758994e8, 5.401485059305329e8, 2.139208514210492e8, 5.81078318030964e8, 6.755784813262945e7, 4.7457072854696584e8, 1.5619829301999962e8, 7.297436959754273e8, 5.971146782027047e8, 2.4052392571969998e8, 3.5474033818292594e8, 4.2814146215395033e8, 5.3623137127887636e8, 3.1642377731277835e8, 2.299632587913666e8, 4.605862121023348e8, 3.7134346161750555e8, 2.5439080859569603e8, 3.2291480044336915e8, 5.222305306245924e8, 3.909758309750125e8, 1.982747778922491e8, 1.7549597282451868e8, 3.067955039170109e8, 5.774046753314524e8, 7.264160593159741e8, 9.715766546951113e8, 3.6650168404998016e8, 3.9906484939714605e8, 5.94078691504326e8, 7.112106726379944e8, 5.178430213052591e8, 4.304454076671879e8, 2.4147385688167942e8, 8.450859297839428e8, 6.609014059610162e8, 6.81425701572028e8, 6.980910099810737e8, 6.88911164144298e8, 6.366382275917616e8, 7.11147924291074e8, 4.671874274129403e8, 5.855314580429604e8, 8.577491422158589e8, 5.607534223908439e8, 7.527621003895907e8, 4.478528891542148e8, 5.885872042664865e8, 7.42751407633399e8, 7.455630660356929e8, 4.3137192672442317e8, 6.66552392881122e8, 5.59247611354219e8, 4.3567259788220036e8, 9.344739850346637e8, 7.283070405973499e8, 4.7420611570501995e8, 1.1096753619196208e9, 5.150219718307382e8, 7.608455392760923e8, 6.944678776928359e8, 6.439671762036409e8, 3.471152696082186e8, 4.5613574804603386e8, 7.484221045267849e8, 8.384236111762958e8, 6.616065758670293e8, 9.383463857415285e8, 8.478623030578213e8, 8.44225825677963e8, 5.328276734800395e8, 5.3052113106939185e8, 7.390701048070451e8, 1.0072726539252962e9, 7.355547072404364e8, 7.684708152574078e8, 7.480355044897076e8, 4.691660959182269e8, 6.507320192765949e8, 9.439283424132752e8, 6.971958450114032e8, 5.820794355845141e8, 1.1586208219247448e9, 5.998395529312292e8, 5.734115352256691e8, 7.88149422695254e8, 4.88051907546893e8, 9.201121191453207e8, 4.625410388234807e8, 6.849080304539263e8, 8.77359464202732e8, 6.150825741660129e8, 4.873252254162589e8, 7.29257075150276e8, 5.719659976910565e8, 8.55655410501459e8, 6.271218304503888e8, 8.836663173453964e8, 1.155699073976615e9, 5.526651756065702e8, 1.0236494405834296e9, 4.680215617238265e8, 9.01727347772384e8, 6.079461384318087e8, 6.530598594044318e8, 7.812212515713711e8, 6.340325237138975e8, 9.134324711131915e8, 7.108047185579255e8, 9.204018570188369e8, 7.309336969416357e8, 1.0254742981351022e9, 6.685884599680259e8, 5.138164021131879e8, 8.708350986836454e8, 7.411700103906043e8, 7.660669633143362e8, 8.363401692853531e8, 7.92479160561614e8, 1.0757046336251755e9, 7.354446399397736e8, 1.3878765741758974e9, 9.153092978319346e8, 7.45723880716044e8, 1.187932773425155e9, 1.178984797949514e9, 9.608594292342305e8, 7.622787508598217e8, 7.717103475571756e8, 9.953451434113283e8, 7.040437937516273e8, 1.3698195181120079e9, 6.675192307509031e8, 1.0411039502330633e9, 1.6141459687176852e9, 1.0955374082163622e9, 1.0193301290575624e9, 8.294171638319488e8, 1.3179603167290552e9, 7.439690108676009e8, 1.3024400045611334e9, 7.825481064199998e8, 1.2962939358020043e9, 1.16490575526698e9, 1.4718199516090155e9, 9.981205615476661e8, 1.2465121299356167e9, 1.0584550761765758e9, 7.821123668066076e8, 9.495201557624177e8, 9.272184941849968e8, 1.2429067608255687e9, 9.831246636805696e8, 1.572669174064135e9, 9.74832788777097e8, 1.007598796598949e9, 1.0729226810733093e9, 9.501425701325535e8, 1.1751125153385818e9, 1.1440583868626451e9, 1.0136475654353368e9, 1.4024356690531929e9, 1.1981510357687614e9, 1.2948360297359595e9, 1.2792942250234878e9, 1.6288032736207368e9, 1.1335202537384548e9, 1.0266298527505541e9, 1.3988337342997572e9, 1.2979322981079686e9, 1.190693853651185e9, 1.386235204714423e9, 1.1450526031872375e9, 1.2825911235604808e9, 1.0206210528933665e9, 1.442191383269673e9, 9.424521164591742e8, 1.1184347112341592e9, 1.3118515964822326e9, 1.5981562733008823e9, 1.4084566769425735e9, 1.4211223478017814e9, 1.1744539236803007e9, 1.4952258559946978e9, 1.4203216610538936e9, 1.3237426576466894e9, 1.5556496772550278e9, 1.3094360080159817e9, 8.825882837940357e8, 1.2862311606410863e9, 1.2606426402318475e9, 1.331754675466411e9, 1.2184281892330005e9, 1.040956181712626e9, 1.4274825136556916e9, 1.542716854942907e9, 1.286628064865281e9, 1.6202253335137837e9, 1.7005856950610085e9, 1.2361130905141048e9, 1.408265007481273e9, 1.67635516304839e9, 1.53910471032396e9, 1.5892663167130673e9, 1.757696725137586e9, 2.0278053927081704e9, 1.4785797335563257e9, 1.4483043250014853e9, 1.2921331507060509e9, 1.3441989204309735e9, 1.3805215844883876e9, 1.6031478129004748e9, 1.7638334237205136e9, 1.3019814564423864e9, 1.7225934835971453e9, 1.477072440127111e9, 1.688612369161523e9, 1.347357792051858e9, 1.53735031913404e9, 1.4745068999045796e9, 1.3127525333408296e9, 1.6934404365938544e9, 1.3670274123878686e9, 1.6524762755927675e9, 2.0892095897050858e9, 1.444956500666511e9, 1.7044951115926893e9, 1.7530277603116012e9, 1.8867296443379579e9, 1.4424070071766787e9, 1.550272881023311e9, 1.8915408035000782e9, 1.345153731484231e9, 1.6093988419216473e9, 1.3905169371891885e9, 1.3965367404717605e9, 1.3616824623963633e9, 2.152923776287385e9, 1.5094524208232095e9, 1.2107155650557916e9, 1.9291306124586082e9, 1.723085909597374e9, 1.5405560795432982e9, 1.5887351665511777e9, 1.8480771473641915e9, 1.8444675261395655e9, 1.5581215042052531e9, 1.785864738767441e9, 1.5211298484992566e9, 1.2291062490793862e9, 1.9037459096462436e9, 1.5255289649931164e9, 1.6280095290209827e9, 1.7843771033544827e9, 1.7021756494912965e9, 1.5010886207680118e9, 1.511307001054393e9, 1.727182252305112e9, 2.0049302883040416e9, 1.6310914244059734e9, 1.792420464097307e9, 1.8556233395334797e9, 1.6991415416757176e9, 1.583442675375006e9, 1.6403396113135202e9, 1.634376286613781e9, 2.0036540331212394e9, 1.9273553132324543e9, 1.3004081396683695e9, 1.4591240645781183e9, 1.6857531242648897e9, 1.6612932444892547e9, 9.469258284883882e8, 1.5304861634033868e9, 1.826482623388871e9, 1.0853444632628117e9, 1.919771729921492e9, 1.8761752089716873e9, 1.6601286362038298e9, 1.338195203243285e9, 1.6930262506945162e9, 1.425973895704783e9, 1.4395873838698254e9, 1.5569039866063023e9, 1.607995156927314e9, 1.432960665129952e9, 1.2723076972520297e9, 1.8581426904625502e9, 1.4227640225246634e9, 1.7785017458426502e9, 1.5373454858333182e9, 1.3028436060929234e9, 1.4670500520214987e9, 1.4091491624170384e9, 1.631731891376827e9, 1.4812098481558366e9, 1.5805055238959363e9, 1.59314651583403e9, 1.465836580353599e9, 1.665136598349133e9, 1.7380713918295603e9, 1.5071757470096192e9, 1.5973513236228907e9, 1.1647531821580024e9, 1.6505383674286613e9, 1.6759500891046596e9, 1.3883527583362112e9, 1.571251608430342e9, 1.2134847332024581e9, 1.466212976616734e9, 1.70005499414096e9, 1.2724463025249312e9, 1.407062106524022e9, 1.2389158195085177e9, 1.4200540486314812e9, 1.1652310621635158e9, 1.6538812884152656e9, 1.4980018153754532e9, 1.3869676420290592e9, 1.2821304443446288e9, 1.58945922079594e9, 1.7786582584036136e9, 1.375215050262562e9, 1.334565880653039e9, 1.361948467861202e9, 1.6003266177268584e9, 1.0024154390288334e9, 8.642461843306104e8, 1.1522551675043263e9, 1.1913048317852013e9, 1.3752001005197117e9, 1.2554327841173296e9, 1.2376928917565234e9, 1.2090114607976606e9, 1.44203909701532e9, 1.30423900483795e9, 1.5693968676666956e9, 1.439810369956949e9, 1.5481637391915936e9, 1.2267852556952262e9, 1.623391493954277e9, 1.5094584156805463e9, 1.4517713820967836e9, 1.0157996868514048e9, 1.0319455810022955e9, 1.393290528453059e9, 1.5067959122505708e9, 9.879158840669236e8, 1.3490734388324027e9, 1.3915231215342991e9, 1.044366777345265e9, 1.341279599680182e9, 1.1757970752595308e9, 1.3316438289878318e9, 1.1739721897650342e9, 1.0537488431589032e9, 9.708513510125642e8, 8.92675820806147e8, 1.3113153290903263e9, 1.0028695845190256e9, 9.47598877961659e8, 1.2895553050612776e9, 1.0089788575920368e9, 1.4628296365853844e9, 9.7738904901778e8, 1.3866355477552443e9, 1.0406804819590743e9, 1.1904087696229503e9, 1.4372043868259723e9, 1.4276681190203323e9, 1.0412949703298662e9, 1.1329140328270853e9, 1.2166628222444382e9, 1.2193158571391122e9, 1.2306221702503743e9, 1.5332568317107682e9, 1.6841137657737803e9, 1.293631060605935e9, 9.528857859712375e8, 8.705130897028055e8, 9.788969618461734e8, 1.08176962138124e9, 1.301091301916139e9, 1.2482791315882454e9, 8.90507699276153e8, 8.254338188193681e8, 1.3344719432832503e9, 1.3141977930530136e9, 8.261964904192895e8, 7.572428733242292e8, 1.2010644951615677e9, 1.0368309228276751e9, 1.3907898627419772e9, 8.666705648145578e8, 1.6309486069826815e9, 1.0485555251971463e9, 1.7840020636146684e9, 1.0922540936494193e9, 1.2454717350020866e9, 8.366765721085954e8, 1.39099636335509e9, 9.84990989812246e8, 8.778500618527539e8, 1.2092470083760738e9, 1.13638249126421e9, 1.1271484914076896e9, 1.0348463098547137e9, 1.5998287299670227e9, 9.023630259151443e8, 1.0319344080056137e9, 9.452138632568442e8, 1.217943820548012e9, 1.2896993675515134e9, 8.350048840524383e8, 9.13819585966475e8, 8.370551334229865e8, 1.2804110850406618e9, 1.0444856889405001e9, 1.406324567024141e9, 1.288120626483058e9, 9.78745672050432e8, 9.358017802785448e8, 8.384968018489333e8, 1.026733293368521e9, 1.1260661895723886e9, 1.3978625595780087e9, 1.3904269065401106e9, 1.143115663564463e9, 1.1761871247178922e9, 6.691631080024445e8, 1.1565571852093794e9, 1.1059111355714817e9, 1.1905170698864458e9, 8.610102777563607e8, 1.1382749896977732e9, 1.1352495506604345e9, 1.1313436955575783e9, 1.0004456456681304e9, 8.788881565952373e8, 9.660602269728855e8, 1.0472066950307059e9, 1.1587799644514625e9, 1.1484051642763486e9, 8.75279397229386e8, 9.338455931659459e8, 1.1838203924618878e9, 7.528962439470361e8, 1.0772885672743874e9, 6.881146690390843e8, 9.00630092315382e8, 9.64139803571312e8, 7.531738066573715e8, 9.285408395706664e8, 1.0388640728962091e9, 1.0870991837107298e9, 9.558334086283203e8, 7.069512616055723e8, 8.760311435328676e8, 1.0852711724486277e9, 8.466121968872612e8, 7.881395482823787e8, 7.380970608627555e8, 9.069335012231114e8, 1.0925559597825873e9, 9.847221471982034e8, 6.847721646719781e8, 8.34664501786976e8, 6.570503021796353e8, 1.0969504642428076e9, 8.553567802985792e8, 1.0947766993590198e9, 4.251359644844124e8, 1.2653848540955095e9, 6.943039603079233e8, 1.3268838818847542e9, 7.112934793455585e8, 8.7848028691607e8, 9.202398654809507e8, 8.010465441155056e8, 8.020068244617622e8, 4.919195157712579e8, 7.377607999250466e8, 8.459572224602251e8, 9.475640111484044e8, 8.313738870366695e8, 7.869553852271795e8, 1.2335249251360803e9, 8.368690859880756e8, 1.217930938450035e9, 5.406056333215505e8, 1.0383214048505763e9, 8.11300855984473e8, 7.593545581415007e8, 6.141320134205137e8, 5.574406322298226e8, 9.197825652140853e8, 5.554490307277578e8, 9.879595490791899e8, 7.981528930463889e8, 9.413813279176033e8, 8.79010812429543e8, 1.2708215713958168e9, 6.732657929161015e8, 6.991934888191106e8, 5.730533694080842e8, 9.057449590014135e8, 1.118674655537135e9, 9.489826313238167e8, 6.767673666293002e8, 1.2676740856623e9, 9.119131953151207e8, 9.92769764125628e8, 8.890477201736029e8, 6.81541240036213e8, 6.19653053916769e8, 8.188909343169342e8, 7.483303661979177e8, 9.970373902787957e8, 7.466671998923173e8, 1.1612675110467536e9, 7.707370417462921e8, 8.513253635801277e8, 9.75888660790932e8, 6.956232791518961e8, 8.460891737988107e8, 8.538532170096492e8, 1.0000145368837419e9, 9.512875450067067e8, 7.077279151458689e8, 1.0610146219027869e9, 8.586788731922324e8, 8.403867656816752e8, 8.821430245494192e8, 5.1486350798576045e8, 9.644432396863487e8, 9.157966020839773e8, 8.10871242335459e8, 1.0357453053535817e9, 9.221001494525423e8, 7.72853591545433e8, 9.214078519805315e8, 6.385907182721095e8, 8.185809043907542e8, 7.725547499778333e8, 3.9720241857807416e8, 6.540396844390179e8, 9.449645885654035e8, 5.336752514721462e8, 7.226484225210097e8, 7.929338716596218e8, 5.702365239891632e8, 1.0173509604174095e9, 8.544447420785081e8, 5.608021538674837e8, 8.158095725634375e8, 3.359398924044368e8, 5.632295892487694e8, 4.532092027971621e8, 1.03421616006111e9, 5.130827583389671e8, 9.099532448551347e8, 8.193083372496333e8, 7.68344107369704e8, 1.1918010947418838e9, 8.327172049902556e8, 7.464728038222855e8, 6.471667299963056e8, 7.292335197004205e8, 9.046137134037595e8, 6.851625736213695e8, 7.690528305605142e8, 5.5075427798278e8, 8.73499452415994e8, 6.946685065741315e8, 7.403634018665208e8, 9.539661472991548e8, 7.357907462363963e8, 5.451562251212434e8, 6.468898076757342e8, 6.708617705167233e8, 1.0131271217369287e9, 3.4613978893431896e8, 6.005775454318709e8, 8.4158030593647e8, 6.113145578958777e8, 8.156370386671529e8, 5.787513509173512e8, 5.55970495366368e8, 7.443181627856612e8, 8.264315954882363e8, 7.217070093277234e8, 8.69257407608979e8, 4.71896393720965e8, 8.719951848642792e8, 4.4908642764573365e8, 6.327687030041596e8, 6.108431570666044e8, 6.061561003131776e8, 4.761832375080607e8, 4.0040787067227864e8, 5.683094273297665e8, 2.1432773235987008e8, 6.394864419600806e8, 8.060709994578863e8, 8.200984729710375e8, 4.178936318257353e8, 5.1579951401549155e8, 1.0455568087155063e9, 7.806829900635195e8, 7.230471749114652e8, 5.137944804914789e8, 3.81840599736562e8, 2.6410479514766866e8, 5.612176055587587e8, 8.850222871124156e8, 6.480244577631862e8, 6.836352809223045e8, 6.929981284449611e8, 5.331509045612211e8, 6.35733115208966e8, 6.507380261559601e8, 7.309958280374616e8, 3.3657513148046017e8, 3.0344936669777024e8, 5.050424819295911e8, 5.307537076695009e8, 9.740697612906485e8, 8.04422261936967e8, 7.773284007124143e8, 5.506588858948044e8, 6.876548719784e8, 6.982221162279423e8, 6.084083877416755e8, 6.959682071803687e8, 4.227271211472448e8, 4.564611851601441e8, 1.1510998976339393e9, 6.612293610826876e8, 3.967040897979921e8, 5.452926728085988e8, 5.500505170206763e8, 6.700544001506081e8, 7.075207838413829e8, 2.821685096710658e8, 7.19071205819213e8, 4.851654768677101e8, 4.807636469027304e8, 3.844825358587462e8, 6.439626251141845e8, 7.087806727413186e8, 8.019149912698743e8, 9.212246615784307e8, 7.908951104732066e8, 7.993688783074459e8, 2.917086553877971e8, 8.023040179247317e8, 4.780626567096325e8, 3.046686113723001e8, 5.1105012248415375e8, 3.6144920571616966e8, 8.012083144384297e8, 3.674221886178826e8, 4.740650197121887e8, 6.304811942253935e8, 4.351318431968696e8, 3.96263463630276e8, 3.0179625813634074e8, 2.422588926303653e8, 3.8560655608063567e8, 2.8231342550569713e8, 4.723822952911294e8, 2.210268436688984e8, 4.518881505034813e8, 4.20573814226324e8, 6.802415717264752e8, 4.3697354357185394e8, 1.2041730619407743e8, 8.233833570434647e8, 5.556964741265478e8, 8.935530230000124e8, 2.3998164799056005e8, 6.722394494620254e8, 7.647431720479448e8, 3.2477893047372687e8, 4.771927568708407e8, 4.427042435205423e8, 6.469625816899015e8, 8.556302240173066e7, 2.900096895727997e8, 4.207461345566882e8, 3.277383608317201e8, 2.304402490382975e8, 1.739736480459392e8, 5.756079245834526e8, 6.222980750755017e8, 4.631388951422197e8, 8.64026096746172e8, 3.6436808805580795e7, 4.2446146357445014e8, 5.323638423796798e8, 5.172204168538889e8, 8.421234458717122e8, 6.001971195505743e8, 4.1296282274119806e8, 4.9883377560204315e8, 3.584147135168193e8, 4.735760423683539e8, 4.266975094035999e8, 5.758437566838502e8, 3.566953553127437e8, 6.670249699902742e8, 2.097867826935885e8, 5.88254622617543e8, 5.860431843748971e8, 4.65396816791572e8, 5.845418588548634e8, 4.996137945314466e8, 4.265291084257743e8, 2.49749144107533e8, 7.023840109830363e8, 7.903975960315942e8, 4.897269515695029e8, 4.91017963339536e8, 4.189215594576102e8, 5.485521690002558e8, 3.4835892344226724e8, 3.6180824808556616e8, 5.988338154316573e8, 4.8383939099413586e8, 8.902930027737397e8, 2.963981105466603e8, 3.102658235783459e8]




tstart=0.0
tend=103.0
sampling= .125 #7.5 min
tgrid=tstart:sampling:tend

tProcess_total=[0.0, 0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875, 2.0, 2.125, 2.25, 2.375, 2.5, 2.625, 2.75, 2.875, 3.0, 3.125, 3.25, 3.375, 3.5, 3.625, 3.75, 3.875, 4.0, 4.125, 4.25, 4.375, 4.5, 4.625, 4.75, 4.875, 5.0, 5.125, 5.25, 5.375, 5.5, 5.625, 5.75, 5.875, 6.0, 6.125, 6.25, 6.375, 6.5, 6.625, 6.75, 6.875, 7.0, 7.125, 7.25, 7.375, 7.5, 7.625, 7.75, 7.875, 8.0, 8.125, 8.25, 8.375, 8.5, 8.625, 8.75, 8.875, 9.0, 9.125, 9.25, 9.375, 9.5, 9.625, 9.75, 9.875, 10.0, 10.125, 10.25, 10.375, 10.5, 10.625, 10.75, 10.875, 11.0, 11.125, 11.25, 11.375, 11.5, 11.625, 11.75, 11.875, 12.0, 12.125, 12.25, 12.375, 12.5, 12.625, 12.75, 12.875, 13.0, 13.125, 13.25, 13.375, 13.5, 13.625, 13.75, 13.875, 14.0, 14.125, 14.25, 14.375, 14.5, 14.625, 14.75, 14.875, 15.0, 15.125, 15.25, 15.375, 15.5, 15.625, 15.75, 15.875, 16.0, 16.125, 16.25, 16.375, 16.5, 16.625, 16.75, 16.875, 17.0, 17.125, 17.25, 17.375, 17.5, 17.625, 17.75, 17.875, 18.0, 18.125, 18.25, 18.375, 18.5, 18.625, 18.75, 18.875, 19.0, 19.125, 19.25, 19.375, 19.5, 19.625, 19.75, 19.875, 20.0, 20.125, 20.25, 20.375, 20.5, 20.625, 20.75, 20.875, 21.0, 21.125, 21.25, 21.375, 21.5, 21.625, 21.75, 21.875, 22.0, 22.125, 22.25, 22.375, 22.5, 22.625, 22.75, 22.875, 23.0, 23.125, 23.25, 23.375, 23.5, 23.625, 23.75, 23.875, 24.0, 24.125, 24.25, 24.375, 24.5, 24.625, 24.75, 24.875, 25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875, 26.0, 26.125, 26.25, 26.375, 26.5, 26.625, 26.75, 26.875, 27.0, 27.125, 27.25, 27.375, 27.5, 27.625, 27.75, 27.875, 28.0, 28.125, 28.25, 28.375, 28.5, 28.625, 28.75, 28.875, 29.0, 29.125, 29.25, 29.375, 29.5, 29.625, 29.75, 29.875, 30.0, 30.125, 30.25, 30.375, 30.5, 30.625, 30.75, 30.875, 31.0, 31.125, 31.25, 31.375, 31.5, 31.625, 31.75, 31.875, 32.0, 32.125, 32.25, 32.375, 32.5, 32.625, 32.75, 32.875, 33.0, 33.125, 33.25, 33.375, 33.5, 33.625, 33.75, 33.875, 34.0, 34.125, 34.25, 34.375, 34.5, 34.625, 34.75, 34.875, 35.0, 35.125, 35.25, 35.375, 35.5, 35.625, 35.75, 35.875, 36.0, 36.125, 36.25, 36.375, 36.5, 36.625, 36.75, 36.875, 37.0, 37.125, 37.25, 37.375, 37.5, 37.625, 37.75, 37.875, 38.0, 38.125, 38.25, 38.375, 38.5, 38.625, 38.75, 38.875, 39.0, 39.125, 39.25, 39.375, 39.5, 39.625, 39.75, 39.875, 40.0, 40.125, 40.25, 40.375, 40.5, 40.625, 40.75, 40.875, 41.0, 41.125, 41.25, 41.375, 41.5, 41.625, 41.75, 41.875, 42.0, 42.125, 42.25, 42.375, 42.5, 42.625, 42.75, 42.875, 43.0, 43.125, 43.25, 43.375, 43.5, 43.625, 43.75, 43.875, 44.0, 44.125, 44.25, 44.375, 44.5, 44.625, 44.75, 44.875, 45.0, 45.125, 45.25, 45.375, 45.5, 45.625, 45.75, 45.875, 46.0, 46.125, 46.25, 46.375, 46.5, 46.625, 46.75, 46.875, 47.0, 47.125, 47.25, 47.375, 47.5, 47.625, 47.75, 47.875, 48.0, 48.125, 48.25, 48.375, 48.5, 48.625, 48.75, 48.875, 49.0, 49.125, 49.25, 49.375, 49.5, 49.625, 49.75, 49.875, 50.0, 50.125, 50.25, 50.375, 50.5, 50.625, 50.75, 50.875, 51.0, 51.125, 51.25, 51.375, 51.5, 51.625, 51.75, 51.875, 52.0, 52.125, 52.25, 52.375, 52.5, 52.625, 52.75, 52.875, 53.0, 53.125, 53.25, 53.375, 53.5, 53.625, 53.75, 53.875, 54.0, 54.125, 54.25, 54.375, 54.5, 54.625, 54.75, 54.875, 55.0, 55.125, 55.25, 55.375, 55.5, 55.625, 55.75, 55.875, 56.0, 56.125, 56.25, 56.375, 56.5, 56.625, 56.75, 56.875, 57.0, 57.125, 57.25, 57.375, 57.5, 57.625, 57.75, 57.875, 58.0, 58.125, 58.25, 58.375, 58.5, 58.625, 58.75, 58.875, 59.0, 59.125, 59.25, 59.375, 59.5, 59.625, 59.75, 59.875, 60.0, 60.125, 60.25, 60.375, 60.5, 60.625, 60.75, 60.875, 61.0, 61.125, 61.25, 61.375, 61.5, 61.625, 61.75, 61.875, 62.0, 62.125, 62.25, 62.375, 62.5, 62.625, 62.75, 62.875, 63.0, 63.125, 63.25, 63.375, 63.5, 63.625, 63.75, 63.875, 64.0, 64.125, 64.25, 64.375, 64.5, 64.625, 64.75, 64.875, 65.0, 65.125, 65.25, 65.375, 65.5, 65.625, 65.75, 65.875, 66.0, 66.125, 66.25, 66.375, 66.5, 66.625, 66.75, 66.875, 67.0, 67.125, 67.25, 67.375, 67.5, 67.625, 67.75, 67.875, 68.0, 68.125, 68.25, 68.375, 68.5, 68.625, 68.75, 68.875, 69.0, 69.125, 69.25, 69.375, 69.5, 69.625, 69.75, 69.875, 70.0, 70.125, 70.25, 70.375, 70.5, 70.625, 70.75, 70.875, 71.0, 71.125, 71.25, 71.375, 71.5, 71.625, 71.75, 71.875, 72.0, 72.125, 72.25, 72.375, 72.5, 72.625, 72.75, 72.875, 73.0, 73.125, 73.25, 73.375, 73.5, 73.625, 73.75, 73.875, 74.0, 74.125, 74.25, 74.375, 74.5, 74.625, 74.75, 74.875, 75.0, 75.125, 75.25, 75.375, 75.5, 75.625, 75.75, 75.875, 76.0, 76.125, 76.25, 76.375, 76.5, 76.625, 76.75, 76.875, 77.0, 77.125, 77.25, 77.375, 77.5, 77.625, 77.75, 77.875, 78.0, 78.125, 78.25, 78.375, 78.5, 78.625, 78.75, 78.875, 79.0, 79.125, 79.25, 79.375, 79.5, 79.625, 79.75, 79.875, 80.0, 80.125, 80.25, 80.375, 80.5, 80.625, 80.75, 80.875, 81.0, 81.125, 81.25, 81.375, 81.5, 81.625, 81.75, 81.875, 82.0, 82.125, 82.25, 82.375, 82.5, 82.625, 82.75, 82.875, 83.0, 83.125, 83.25, 83.375, 83.5, 83.625, 83.75, 83.875, 84.0, 84.125, 84.25, 84.375, 84.5, 84.625, 84.75, 84.875, 85.0, 85.125, 85.25, 85.375, 85.5, 85.625, 85.75, 85.875, 86.0, 86.125, 86.25, 86.375, 86.5, 86.625, 86.75, 86.875, 87.0, 87.125, 87.25, 87.375, 87.5, 87.625, 87.75, 87.875, 88.0, 88.125, 88.25, 88.375, 88.5, 88.625, 88.75, 88.875, 89.0, 89.125, 89.25, 89.375, 89.5, 89.625, 89.75, 89.875, 90.0, 90.125, 90.25, 90.375, 90.5, 90.625, 90.75, 90.875, 91.0, 91.125, 91.25, 91.375, 91.5, 91.625, 91.75, 91.875, 92.0, 92.125, 92.25, 92.375, 92.5, 92.625, 92.75, 92.875, 93.0, 93.125, 93.25, 93.375, 93.5, 93.625, 93.75, 93.875, 94.0, 94.125, 94.25, 94.375, 94.5, 94.625, 94.75, 94.875, 95.0, 95.125, 95.25, 95.375, 95.5, 95.625, 95.75, 95.875, 96.0, 96.125, 96.25, 96.375, 96.5, 96.625, 96.75, 96.875, 97.0, 97.125, 97.25, 97.375, 97.5, 97.625, 97.75, 97.875, 98.0, 98.125, 98.25, 98.375, 98.5, 98.625, 98.75, 98.875, 99.0, 99.125, 99.25, 99.375, 99.5, 99.625, 99.75, 99.875, 100.0, 100.125, 100.25, 100.375, 100.5, 100.625, 100.75, 100.875, 101.0, 101.125, 101.25, 101.375, 101.5, 101.625, 101.75, 101.875, 102.0, 102.125, 102.25, 102.375, 102.5, 102.625, 102.75, 102.875, 103.0]

tProcess=[0.125, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1.0, 1.125, 1.25, 1.375, 1.5, 1.625, 1.75, 1.875, 2.0, 2.125, 2.25, 2.375, 2.5, 2.625, 2.75, 2.875, 3.0, 3.125, 3.25, 3.375, 3.5, 3.625, 3.75, 3.875, 4.0, 4.125, 4.25, 4.375, 4.5, 4.625, 4.75, 4.875, 5.0, 5.125, 5.25, 5.375, 5.5, 5.625, 5.75, 5.875, 6.0, 6.125, 6.25, 6.375, 6.5, 6.625, 6.75, 6.875, 7.0, 7.125, 7.25, 7.375, 7.5, 7.625, 7.75, 7.875, 8.0, 8.125, 8.25, 8.375, 8.5, 8.625, 8.75, 8.875, 9.0, 9.125, 9.25, 9.375, 9.5, 9.625, 9.75, 9.875, 10.0, 10.125, 10.25, 10.375, 10.5, 10.625, 10.75, 10.875, 11.0, 11.125, 11.25, 11.375, 11.5, 11.625, 11.75, 11.875, 12.0, 12.125, 12.25, 12.375, 12.5, 12.625, 12.75, 12.875, 13.0, 13.125, 13.25, 13.375, 13.5, 13.625, 13.75, 13.875, 14.0, 14.125, 14.25, 14.375, 14.5, 14.625, 14.75, 14.875, 15.0, 15.125, 15.25, 15.375, 15.5, 15.625, 15.75, 15.875, 16.0, 16.125, 16.25, 16.375, 16.5, 16.625, 16.75, 16.875, 17.0, 17.125, 17.25, 17.375, 17.5, 17.625, 17.75, 17.875, 18.0, 18.125, 18.25, 18.375, 18.5, 18.625, 18.75, 18.875, 19.0, 19.125, 19.25, 19.375, 19.5, 19.625, 19.75, 19.875, 20.0, 20.125, 20.25, 20.375, 20.5, 20.625, 20.75, 20.875, 21.0, 21.125, 21.25, 21.375, 21.5, 21.625, 21.75, 21.875, 22.0, 22.125, 22.25, 22.375, 22.5, 22.625, 22.75, 22.875, 23.0, 23.125, 23.25, 23.375, 23.5, 23.625, 23.75, 23.875, 24.0, 24.125, 24.25, 24.375, 24.5, 24.625, 24.75, 24.875, 25.0, 25.125, 25.25, 25.375, 25.5, 25.625, 25.75, 25.875, 26.0, 26.125, 26.25, 26.375, 26.5, 26.625, 26.75, 26.875, 27.0, 27.125, 27.25, 27.375, 27.5, 27.625, 27.75, 27.875, 28.0, 28.125, 28.25, 28.375, 28.5, 28.625, 28.75, 28.875, 29.0, 29.125, 29.25, 29.375, 29.5, 29.625, 29.75, 29.875, 30.0, 30.125, 30.25, 30.375, 30.5, 30.625, 30.75, 30.875, 31.0, 31.125, 31.25, 31.375, 31.5, 31.625, 31.75, 31.875, 32.0, 32.125, 32.25, 32.375, 32.5, 32.625, 32.75, 32.875, 33.0, 33.125, 33.25, 33.375, 33.5, 33.625, 33.75, 33.875, 34.0, 34.125, 34.25, 34.375, 34.5, 34.625, 34.75, 34.875, 35.0, 35.125, 35.25, 35.375, 35.5, 35.625, 35.75, 35.875, 36.0, 36.125, 36.25, 36.375, 36.5, 36.625, 36.75, 36.875, 37.0, 37.125, 37.25, 37.375, 37.5, 37.625, 37.75, 37.875, 38.0, 38.125, 38.25, 38.375, 38.5, 38.625, 38.75, 38.875, 39.0, 39.125, 39.25, 39.375, 39.5, 39.625, 39.75, 39.875, 40.0, 40.125, 40.25, 40.375, 40.5, 40.625, 40.75, 40.875, 41.0, 41.125, 41.25, 41.375, 41.5, 41.625, 41.75, 41.875, 42.0, 42.125, 42.25, 42.375, 42.5, 42.625, 42.75, 42.875, 43.0, 43.125, 43.25, 43.375, 43.5, 43.625, 43.75, 43.875, 44.0, 44.125, 44.25, 44.375, 44.5, 44.625, 44.75, 44.875, 45.0, 45.125, 45.25, 45.375, 45.5, 45.625, 45.75, 45.875, 46.0, 46.125, 46.25, 46.375, 46.5, 46.625, 46.75, 46.875, 47.0, 47.125, 47.25, 47.375, 47.5, 47.625, 47.75, 47.875, 48.0, 48.125, 48.25, 48.375, 48.5, 48.625, 48.75, 48.875, 49.0, 49.125, 49.25, 49.375, 49.5, 49.625, 49.75, 49.875, 50.0, 50.125, 50.25, 50.375, 50.5, 50.625, 50.75, 50.875, 51.0, 51.125, 51.25, 51.375, 51.5, 51.625, 51.75, 51.875, 52.0, 52.125, 52.25, 52.375, 52.5, 52.625, 52.75, 52.875, 53.0, 53.125, 53.25, 53.375, 53.5, 53.625, 53.75, 53.875, 54.0, 54.125, 54.25, 54.375, 54.5, 54.625, 54.75, 54.875, 55.0, 55.125, 55.25, 55.375, 55.5, 55.625, 55.75, 55.875, 56.0, 56.125, 56.25, 56.375, 56.5, 56.625, 56.75, 56.875, 57.0, 57.125, 57.25, 57.375, 57.5, 57.625, 57.75, 57.875, 58.0, 58.125, 58.25, 58.375, 58.5, 58.625, 58.75, 58.875, 59.0, 59.125, 59.25, 59.375, 59.5, 59.625, 59.75, 59.875, 60.0, 60.125, 60.25, 60.375, 60.5, 60.625, 60.75, 60.875, 61.0, 61.125, 61.25, 61.375, 61.5, 61.625, 61.75, 61.875, 62.0, 62.125, 62.25, 62.375, 62.5, 62.625, 62.75, 62.875, 63.0, 63.125, 63.25, 63.375, 63.5, 63.625, 63.75, 63.875, 64.0, 64.125, 64.25, 64.375, 64.5, 64.625, 64.75, 64.875, 65.0, 65.125, 65.25, 65.375, 65.5, 65.625, 65.75, 65.875, 66.0, 66.125, 66.25, 66.375, 66.5, 66.625, 66.75, 66.875, 67.0, 67.125, 67.25, 67.375, 67.5, 67.625, 67.75, 67.875, 68.0, 68.125, 68.25, 68.375, 68.5, 68.625, 68.75, 68.875, 69.0, 69.125, 69.25, 69.375, 69.5, 69.625, 69.75, 69.875, 70.0, 70.125, 70.25, 70.375, 70.5, 70.625, 70.75, 70.875, 71.0, 71.125, 71.25, 71.375, 71.5, 71.625, 71.75, 71.875, 72.0, 72.125, 72.25, 72.375, 72.5, 72.625, 72.75, 72.875, 73.0, 73.125, 73.25, 73.375, 73.5, 73.625, 73.75, 73.875, 74.0, 74.125, 74.25, 74.375, 74.5, 74.625, 74.75, 74.875, 75.0, 75.125, 75.25, 75.375, 75.5, 75.625, 75.75, 75.875, 76.0, 76.125, 76.25, 76.375, 76.5, 76.625, 76.75, 76.875, 77.0, 77.125, 77.25, 77.375, 77.5, 77.625, 77.75, 77.875, 78.0, 78.125, 78.25, 78.375, 78.5, 78.625, 78.75, 78.875, 79.0, 79.125, 79.25, 79.375, 79.5, 79.625, 79.75, 79.875, 80.0, 80.125, 80.25, 80.375, 80.5, 80.625, 80.75, 80.875, 81.0, 81.125, 81.25, 81.375, 81.5, 81.625, 81.75, 81.875, 82.0, 82.125, 82.25, 82.375, 82.5, 82.625, 82.75, 82.875, 83.0, 83.125, 83.25, 83.375, 83.5, 83.625, 83.75, 83.875, 84.0, 84.125, 84.25, 84.375, 84.5, 84.625, 84.75, 84.875, 85.0, 85.125, 85.25, 85.375, 85.5, 85.625, 85.75, 85.875, 86.0, 86.125, 86.25, 86.375, 86.5, 86.625, 86.75, 86.875, 87.0, 87.125, 87.25, 87.375, 87.5, 87.625, 87.75, 87.875, 88.0, 88.125, 88.25, 88.375, 88.5, 88.625, 88.75, 88.875, 89.0, 89.125, 89.25, 89.375, 89.5, 89.625, 89.75, 89.875, 90.0, 90.125, 90.25, 90.375, 90.5, 90.625, 90.75, 90.875, 91.0, 91.125, 91.25, 91.375, 91.5, 91.625, 91.75, 91.875, 92.0, 92.125, 92.25, 92.375, 92.5, 92.625, 92.75, 92.875, 93.0, 93.125, 93.25, 93.375, 93.5, 93.625, 93.75, 93.875, 94.0, 94.125, 94.25, 94.375, 94.5, 94.625, 94.75, 94.875, 95.0, 95.125, 95.25, 95.375, 95.5, 95.625, 95.75, 95.875, 96.0, 96.125, 96.25, 96.375, 96.5, 96.625, 96.75, 96.875, 97.0, 97.125, 97.25, 97.375, 97.5, 97.625, 97.75, 97.875, 98.0, 98.125, 98.25, 98.375, 98.5, 98.625, 98.75, 98.875, 99.0, 99.125, 99.25, 99.375, 99.5, 99.625, 99.75, 99.875, 100.0, 100.125, 100.25, 100.375, 100.5, 100.625, 100.75, 100.875, 101.0, 101.125, 101.25, 101.375, 101.5, 101.625, 101.75, 101.875, 102.0, 102.125, 102.25, 102.375, 102.5, 102.625, 102.75, 102.875, 103.0]


# XV = Xt = 2.00 × 108 cell/L, [GLC] = 29.1 mM,
# [GLN] = 4.90 mM, [LAC] = 0 mM, [AMM] = 0.310 mM, [mAb] =
# 80.6 mM.
########################## Plot the noise dataset of Xv


u0 = [2e8    ,   2e8 ,   29.1, 4.9, 0.0, 0.310, 80.6] #initial condition from "Bioprocess optimization under uncertainty using ensemble modeling(2017)"
tstart=0.0
tend=103.0
sampling= .125 #7.5 min
# sampling= 0.0625  #3.75
tgrid=tstart:sampling:tend
#parameters from the paper "Bioprocess optimization under uncertainty using ensemble modeling (2017)" with low mAb titer.
p = [5.8e-2, 0.75, 0.075, 171.756, 28.484, 3e-2, 1.76, 0.05511, 1.061e8, 4.853e-14, 5.57e8, 3.4e-13, 4, 9.6e-3, 1.399, 4.27e-1, 0.1, 2, 7.21e-9 ]
prob =  ODEProblem(process_model!, u0, (tstart,tend), p)
sol = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid)

#parameters related to PhD and temperature alteration with high mAb titer.
p = [7.5e-2, 0.75, 0.075, 171.756, 28.484, 3e-2, 1.76, 0.05511, 1.061e8, 4.853e-14, 5.57e8, 3.4e-13, 4, 9.6e-3, 1.399, 4.27e-1, 0.1, 2, 9.21e-9 ]
prob =  ODEProblem(process_model!, u0, (tstart,tend), p)
sol2 = solve(prob, AutoTsit5(Rosenbrock23()),saveat=tgrid)


lws=3.5
gr( xtickfontsize=16, ytickfontsize=16, xguidefontsize=16, yguidefontsize=16, legendfontsize=16);
plots=plot(tgrid,online_Xv_noise_7_5min_Htiter,color="lightblue", lw=lws,label = "Xv noise run B-SD", xlabel=L"time(h)",ylabel=[L"Xv (cell/L)" L"Xt (cell/L)" L"GLC (mM)" L"GLN(mM)" L"LAC(mM)" L"AMM(mM)" L"mAb (mg/L)"],layout=(7,1) )
plot!(sol.t,transpose(sol),color="red", lw=lws, label = " run A-SD", layout=(7,1))
plot!(sol2.t,transpose(sol2),color="blue", lw=lws, label = " run B-SD", layout=(7,1))
plot!(legend=:outertopright, size=(1000,2000),left_margin=25mm)
display(plots)
savefig("all_runs_SD.png")


lws=3.5
gr( xtickfontsize=16, ytickfontsize=16, xguidefontsize=16, yguidefontsize=16, legendfontsize=16);
plots=plot(tgrid,online_Xv_noise_7_5min_Htiter,color="lightblue", lw=lws,label = "Xv noise run B-SD", xlabel=L"time(h)",ylabel=[L"Xv (cell/L)" L"mAb (mg/L)"],layout=(2,1) )
plot!(sol.t,transpose(sol[[1,7],:]),color="red", lw=lws, label = " run A-SD", layout=(2,1))
plot!(sol2.t,transpose(sol2[[1,7],:]),color="blue", lw=lws, label = " run B-SD", layout=(2,1))
plot!(legend=:outertopright, size=(1000,800),left_margin=25mm)
display(plots)
savefig("Xv_mAb_runs_SD.png")

########  EKF function ########

function EKF(R,pQ,icond,H,noise_dt,pm_mrde)

    p_Q = diag(pQ) # in this code we need only use the diagonal of Process Noise Covariance Matrix, because the off diagonal are zero.

    updated_Xv = []
    updated_Xt = []
    updated_GLC = []
    updated_GLN = []
    updated_LAC = []
    updated_AMM = []
    updated_MAb = []
    updated_P = []
    updated_lambda = []
    updated_stde_P_xv = []
    updated_stde_P_QmAb = []
    updated_stde_P_mAb = []

    updated_P_xv = []
    updated_P_QmAb = []
    updated_P_mAb = []

    predicted_Xv = []
    predicted_Xt = []
    predicted_GLC = []
    predicted_GLN = []
    predicted_LAC = []
    predicted_AMM = []
    predicted_MAb = []
    predicted_P = []
    predicted_lambda = []

    K_lambda=[]

    innovation_error=[]
    log_innovation_error=[]
    NIS=[]
    trace_P=[]
    Sk=[]
    NEES = []
    # NEES_specific = []
    Pc=[]

    init = icond #[X0;P0[:]] # Combined initial value vector
    currentTime = 0.0
    prob = ODEProblem(pm_mrde, init, (currentTime,tProcess[1]),p_Q)

    for t_index = eachindex(tProcess)
      # @infiltrate
      tk = tProcess[t_index]
      tspan = (currentTime,tk)
      sol = solve(prob,BS3(), saveat=tgrid, u0=init,tspan=(currentTime,tk),p=p_Q)#, Rosenbrock23(), abstol = 1e-10, reltol = 1e-10)    # predicted1 = solve(problem, Rosenbrock23(),  u0=u0_set, p=p, saveat=tgrid,abstol = 1e-10, reltol = 1e-10)
      measurement_k = noise_dt[t_index+1]
      newP = reshape(sol(tk)[9:end],8,8); # process covariance matrix
      res1 = (newP*H')
      res2 = H*newP*H'
      dimS = size(res2)
      S = (res2 + ones(dimS[1],dimS[2])*R) #innovation covariance
      K = res1/S # Kalman Gain matrix
      PS = sol(tk)[1:8] #Predicted state
      ie=measurement_k-PS[1] #innovation
      FS = PS + K*(ie) #Filtered state (Updated state)
      Pfilt = newP-K*H*newP # filtered process covariance matrix (Updated state)
      # Pfilt = newP-K*S*K'  # filtered process covariance matrix (Updated state)

      e_x=[sol2[1,:][t_index+1]-FS[1] ;sol2[7,:][t_index+1]-FS[7] ; 9.21e-9 - FS[8]]
      append!(NEES,e_x'* inv(Pfilt[[1, 7,8], [1, 7,8]])* e_x)


      append!(Sk,S)
      # append!(log_innovation_error,log_ie)
      append!(innovation_error,ie)
      append!(trace_P,tr(Pfilt))
      append!(NIS,ie*inv(S)*ie)
      append!(K_lambda,K[8])

    #Predicted state
      append!(predicted_Xv,  PS[1])
      append!(predicted_Xt,  PS[2])
      append!(predicted_GLC, PS[3])
      append!(predicted_GLN, PS[4])
      append!(predicted_LAC, PS[5])
      append!(predicted_AMM, PS[6])
      append!(predicted_MAb, PS[7])
      append!(predicted_lambda, PS[8])

    #Updated state
      append!(updated_Xv,  FS[1])
      append!(updated_Xt,  FS[2])
      append!(updated_GLC, FS[3])
      append!(updated_GLN, FS[4])
      append!(updated_LAC, FS[5])
      append!(updated_AMM, FS[6])
      append!(updated_MAb, FS[7])
      append!(updated_lambda, FS[8])

      # append!(updated_stde_P_xv, sqrt(Pfilt[1,1])/sqrt(length(updated_stde_P_xv)))
      # append!(updated_stde_P_QmAb, sqrt(Pfilt[8,8])/sqrt(length(updated_stde_P_QmAb)))
      # append!(updated_stde_P_mAb, sqrt(Pfilt[7,7])/sqrt(length(updated_stde_P_mAb)))

      append!(updated_stde_P_xv, sqrt(Pfilt[1,1]))
      append!(updated_stde_P_QmAb, sqrt(Pfilt[8,8]))
      append!(updated_stde_P_mAb, sqrt(Pfilt[7,7]))

      append!(updated_P_xv, diag(Pfilt)[1])
      append!(updated_P_QmAb, diag(Pfilt)[8])
      append!(updated_P_mAb, diag(Pfilt)[7])
      # Update initial state variables for the next iteration.
      currentTime = tspan[2]
      init = [FS; Pfilt[:]]
    end


    # Checking consistency
    innovation_error=innovation_error
    rmse= sqrt(sum(innovation_error.^2)/length(innovation_error))
    println("RMSE(innovation_error): ",rmse)

    Sk=Sk
    NIS=NIS
    mean_NIS=mean(NIS)
    println("mean(NIS): ",mean_NIS)
    var_NIS=var(NIS)
    println("var(NIS): ",var_NIS)
    N=length(NIS)
    # https://www.chisquaretable.net/
    # https://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm
    # r1=6.262 #5.629 CI from table using N=15 size of noise dt
    # r2=27.488 #26.119
    r1=745.3933676480418 # cquantile(Chisq(824-1), .975) # CI from table using N=14 size of noise dt 723.51	880.275
    r2=904.3945815724871 # cquantile(Chisq(824-1), .025)

    println("\n====== Last values of diag(P) related to Xv, QmAb and mAb ======")
    println("P(Xv,Xv)  = ",updated_P_xv[end])
    println("P(QmAb,QmAb)  = ",updated_P_QmAb[end])
    println("P(mAb,mAb)  = ",updated_P_mAb[end])


    println("\n====== Innovation magnitude bound test ======")
    println("What is the percentege of innovation errors that lie within the ±2sqrt(Sk)? ", (N-( sum(-2*sqrt.(Sk).>innovation_error)+sum(innovation_error.>2*sqrt.(Sk)) ))/N )

    # println("What is the percentege of innovation errors lie within the ±2sqrt(Sk) ", (N-(sum(-2*sqrt.(Sk).>innovation_error)+sum(innovation_error.>2*sqrt.(Sk))))/N )

    println("\n====== Normalised innovations squared Chi2 test ======")
    println("Is N*mean(NIS) inside of 95% CI (r1 < N*mean(NIS) < r2)?", r1 < N*mean_NIS < r2)
    println("N = ",N)
    println("r1 = ",r1)
    println("r2 = ",r2)
    println("N*mean(NIS) = ",N*mean_NIS)


    println("\n====== NEES test ======")
    println("What is the percentege of NEES that lie within the [0.216,9.348]? ", (N-(sum(0.216.>NEES)+sum(NEES.>9.348)))/N )
    println("What is the percentege of NESS are found inside the one-sided 95% where the 5% tail is ChiSquare(0.95)=7.815 (upper limit) for df=3? ", (N-sum(NEES.>7.815))/N )
    # println("What is the percentege of NESS are found inside the one-sided 95% where the 5% tail is ChiSquare(0.95)=5.99 (upper limit) for df=2? ", (N-sum(NEES_specific.>5.99))/N )

    n=3
    ANEES=NEES./n
    println("What is the percentege of ANEES that lie within the [0.0254,5.868]? ", (N-(sum(((1/n)*(-1.96+sqrt(2*n-1))^2).>ANEES)+sum(ANEES.>((1/n)*(+1.96+sqrt(2*n-1))^2))))/N )

    # plot(ANEES)

    # r1=745.3933676480418 # cquantile(Chisq(824-1), .975) # CI from table using N=14 size of noise dt 723.51	880.275
    # r2=904.3945815724871 # cquantile(Chisq(824-1), .025)
    # ppp=plot(tProcess,NIS,label="NIS")
    # plot!(tProcess,repeat([mean_NIS], N), label="mean(NIS) ≈ 1" ,xlabel=L"time(h)", ylabel=L"NIS" )
    # plot!(tProcess,repeat([r1/N], N), label="r1/N" )
    # plot!(tProcess,repeat([r2/N], N), label="r2/N" )
    # # plot!(repeat([r2one/N], N), label="r2one/N" )
    # display(ppp)
    #
    # # plot Innovation magnitude bound test
    # ppp=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
    # plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
    # plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
    # plot!(legend=:outertopright)
    # display(ppp)

    # ppp=plot(updated_P_xv,label="P_xv")
    # display(ppp)
    # ppp=plot(updated_stde_P_xv,label="SE_xv")
    # display(ppp)
    # ppp=plot(updated_P_QmAb,label="P_QmAb")
    # display(ppp)
    # ppp=plot(updated_stde_P_QmAb,label="SE_QmAb")
    # display(ppp)
    # ppp=plot(updated_P_mAb,label="P_mAb")
    # display(ppp)
    # ppp=plot(updated_stde_P_mAb,label="SE_mAb")
    # display(ppp)



    return [updated_Xv, updated_Xt, updated_GLC, updated_GLN, updated_LAC, updated_AMM, updated_MAb, updated_lambda, K_lambda, updated_stde_P_xv, updated_stde_P_QmAb, updated_stde_P_mAb,updated_P_QmAb,innovation_error, Sk, NIS,NEES]
end


function checking_consistency(result,name)
    # Checking consistency
    innovation_error=result[14]
    Sk=result[15]
    NIS=result[16]
    mean_NIS=mean(NIS)
    var_NIS=var(NIS)
    N=length(NIS)
    # https://www.chisquaretable.net/
    # https://www.itl.nist.gov/div898/handbook/eda/section3/eda3674.htm

    r1=745.3933676480418 # cquantile(Chisq(824-1), .975) # CI from table using N=14 size of noise dt 723.51	880.275
    r2=904.3945815724871 # cquantile(Chisq(824-1), .025)
    ppp=plot(tProcess,NIS,label="NIS")
    plot!(tProcess,repeat([mean_NIS], N), label="mean(NIS) ≈ 1" ,xlabel=L"time(h)", ylabel=L"NIS" )
    plot!(tProcess,repeat([r1/N], N), label="r1/N" )
    plot!(tProcess,repeat([r2/N], N), label="r2/N" )
    display(ppp)
    savefig("chi2-test_"*name*".png")

end








































################################process_model_and_MRDE_PC


####################################################################################################################################
############ SDT B with MRDE_PC and STANDARD P0 ####################################################################################
####################################################################################################################################
println("\n--------------------------------SDT B with MRDE_PC and STANDARD P0-----------------------------------------------\n")

### experiments with JEKF-classic
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,(9.21e-9 - 7.21e-9)^2]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
# P0[8,1]=0.1 #good noise
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(90e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 0.001, (1e-9)^2]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 0]
result_classic=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PC!)
checking_consistency(result_classic,"classic-SDT_B_with_MRDE_PC_and_STANDARD_P0")

### experiments with SANTO
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,(9.21e-9 - 7.21e-9)^2]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
P0[8,1]=((9.21e-9 - 7.21e-9)^2)/4
P0[1,8]=((9.21e-9 - 7.21e-9)^2)/4
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(90e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 0.001, (1e-9)^2]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 0]
result_santo=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PC!)
checking_consistency(result_santo,"santo-SDT_B_with_MRDE_PC_and_STANDARD_P0")

### experiments with KPH2
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,(9.21e-9 - 7.21e-9)^2]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
# P0[8,1]=0.1 #good noise
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(90e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 0.001, (1e-9)^2]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 1]
result_KPH2=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PC!)
checking_consistency(result_KPH2,"KPH2-SDT_B_with_MRDE_PC_and_STANDARD_P0")

lws=3.5
gr( xtickfontsize=13, ytickfontsize=13, xguidefontsize=16, yguidefontsize=16, legendfontsize=11);
plot1=plot(tProcess_total,online_Xv_noise_7_5min_Htiter,color="lightblue", ylim = [0, 2.2e9], label = "Xv noise run B-SD", ylabel=L"Xv (Cell/L)" ,xlabel=L"time(h)" , lw=lws)
plot!(tProcess,result_classic[1], label = "JEKF-Classic",color=:purple , lw=lws)
plot!(tProcess,result_santo[1], label = "JEKF-SANTO",color=:blue  , lw=lws)
plot!(tProcess,result_KPH2[1], label = "JEKF-KPH2",color=:green  , lw=lws)
plot!(sol2.t,sol2[1,:],color=:red ,  ls=:dot, label = "Ground truth run B-SD", lw=lws)
plot!(legend=:outertopright)
annotate!(15, 2e9, text("A", :left, 10, 17))

plot2=hline([9.21e-9] ,color=:red , ls=:dot, label = "Ground truth run B-SD" ,xlabel=L"time(h)", ylabel=L"QmAb (mg/(cell~h))", lw=lws)
plot!(tProcess,result_classic[8], label = "JEKF-Classic",color=:purple, lw=lws )
plot!(tProcess,result_santo[8], label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,result_KPH2[8], label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
annotate!(15, 8e-9, text("B", :left, 10, 17))

plot3=plot(sol2.t,sol2[7,:], color=:red , ls=:dot, label = "Ground truth run B-SD" ,xlabel=L"time(h)", ylabel=L"mAb (mg/L)", lw=lws)
plot!(tProcess,result_classic[7], label = "JEKF-Classic",color=:purple, lw=lws )
plot!(tProcess,result_santo[7], label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,result_KPH2[7], label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
annotate!(15, 500, text("C", :left, 10, 17))

pp=plot(plot1,plot2,plot3, layout=(3,1),size = (900,800))
display(pp)
png("SDT_B_with_MRDE_PC_and_STANDARD_P0")

plot_K=plot(tProcess,(result_classic[9]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"Kalman~Gain~of~QmAb", lw=lws)#, ylim = [-2e-35, 2e-35])
plot!(tProcess,(result_santo[9]), label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,(result_KPH2[9]), label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
display(plot_K)

plot_SE_1=plot(tProcess,(result_classic[10]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"Standard~Error~of~Xv", lw=lws)
plot!(tProcess,(result_santo[10]), label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,(result_KPH2[10]), label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
display(plot_SE_1)

plot_SE_2=plot(tProcess,(result_classic[11]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"Standard~Error~of~QmAb", lw=lws)
plot!(tProcess,(result_santo[11]), label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,(result_KPH2[11]), label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
display(plot_SE_2)

plot_SE_3=plot(tProcess,(result_classic[12]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"Standard~Error~of~mAb", lw=lws)
plot!(tProcess,(result_santo[12]), label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,(result_KPH2[12]), label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
display(plot_SE_3)






# plot Innovation magnitude bound test
innovation_error=result_classic[14]
Sk=result_classic[15]
plot1=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-Classic", :left, 10, 13))

innovation_error=result_santo[14]
Sk=result_santo[15]
plot2=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-SANTO", :left, 10, 13))

innovation_error=result_KPH2[14]
Sk=result_KPH2[15]
plot3=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-KPH2", :left, 10, 13))

pp=plot(plot1,plot2,plot3, layout=(3,1),size = (900,800))
display(pp)
# savefig("IMB-test_"*name*".png")


# plot Innovation magnitude bound test
lws=3.5
gr( xtickfontsize=13, ytickfontsize=13, xguidefontsize=16, yguidefontsize=16, legendfontsize=12);
innovation_error=result_classic[14]
Sk=result_classic[15]
plot1=plot(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-Classic",xlabel=L"time(h)",color=:purple, ylabel=L"Innovation~Error" ,linestyle=:solid, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-Classic",color=:purple ,linestyle=:solid, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-Classic" ,color=:purple,linestyle=:solid, lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-Classic", :left, 10, 13))

innovation_error=result_santo[14]
Sk=result_santo[15]
plot!(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-SANTO",xlabel=L"time(h)", ylabel=L"Innovation~Error" ,color=:blue,linestyle=:dot, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-SANTO" ,color=:blue,linestyle=:dot, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-SANTO" ,color=:blue,linestyle=:dot, lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-SANTO", :left, 10, 13))

innovation_error=result_KPH2[14]
Sk=result_KPH2[15]
plot!(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-KPH2",xlabel=L"time(h)", ylabel=L"Innovation~Error" ,color=:green,linestyle=:dashdot, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-KPH2" ,color=:green,linestyle=:dashdot, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-KPH2",color=:green,linestyle=:dashdot , lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-KPH2", :left, 10, 13))

pp=plot(plot1,size = (1300,500),left_margin=5mm, bottom_margin=5mm)
display(pp)
png("IMB-SDT_B_with_MRDE_PC_and_STANDARD_P0")






println("SDT B with MRDE_PC and STANDARD P0")
println("RMSPE true mAb vs Classic: ",RMSPE(sol2[7,2:end],result_classic[7]) )
println("RMSPE true mAb vs SANTO: ",RMSPE(sol2[7,2:end],result_santo[7]) )
println("RMSPE true mAb vs KPH2: ",RMSPE(sol2[7,2:end],result_KPH2[7]) )

plotNEES=hline([7.815] ,color=:red , ls=:dot, label = L"Upper~limit~of~\chi^2_{3}(0.95)" ,xlabel=L"time(h)", ylabel=L"NEES", lw=lws)
hline!([5.868] ,color=:red , ls=:dot, label = L"Upper~limit~of~\chi^2_{3}(0.95)" ,xlabel=L"time(h)", ylabel=L"NEES", lw=lws)
hline!([0.0254] ,color=:red , ls=:dot, label = L"Upper~limit~of~\chi^2_{3}(0.95)" ,xlabel=L"time(h)", ylabel=L"NEES", lw=lws)
plot!(tProcess,result_santo[end], label="JEKF-SANTO",color=:blue,lw=lws)
plot!(tProcess,result_KPH2[end], label="JEKF-KPH2",color=:green,lw=lws)
plot!(legend=:outertopright,size = (900,600))










####################################################################################################################################
############ SDT B with MRDE_PC and SPECIFIC P0 ####################################################################################
####################################################################################################################################

println("\n--------------------------------SDT B with MRDE_PC and SPECIFIC P0-----------------------------------------------\n")


### experiments with JEKF-classic
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,(9.21e-9 - 7.21e-9)^2]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
# P0[8,1]=0.1 #good noise
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(90e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 0.001, (1e-9)^2]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 0]
result_classic=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PC!)
checking_consistency(result_classic,"classic-SDT_B_with_MRDE_PC_and_SPECIFIC_P0")

### experiments with SANTO
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,(9.21e-9 - 7.21e-9)^2]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
P0[8,1]=0.754
P0[1,8]=0.754
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(90e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 1.7, 1e-9]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 0]
result_santo=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PC!)
checking_consistency(result_santo,"santo-SDT_B_with_MRDE_PC_and_SPECIFIC_P0")
plotNEES_MRDE_PC =result_santo[end]

### experiments with KPH2
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,12.21e-1]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
# P0[8,1]=0.1 #good noise
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(90e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 0.001, (1e-9)]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 1]
result_KPH2=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PC!)
checking_consistency(result_KPH2,"KPH2-SDT_B_with_MRDE_PC_and_SPECIFIC_P0")

lws=3.5
gr( xtickfontsize=13, ytickfontsize=13, xguidefontsize=16, yguidefontsize=16, legendfontsize=11);
plot1=plot(tProcess_total,online_Xv_noise_7_5min_Htiter,color="lightblue", ylim = [0, 2.2e9], label = "Xv noise run B-SD", ylabel=L"Xv (Cell/L)" ,xlabel=L"time(h)" , lw=lws)
plot!(tProcess,result_classic[1], label = "JEKF-Classic",color=:purple , lw=lws)
plot!(tProcess,result_santo[1], label = "JEKF-SANTO",color=:blue  , lw=lws)
plot!(tProcess,result_KPH2[1], label = "JEKF-KPH2",color=:green  , lw=lws)
plot!(sol2.t,sol2[1,:],color=:red ,  ls=:dot, label = "Ground truth run B-SD", lw=lws)
plot!(legend=:outertopright)
annotate!(15, 2e9, text("A", :left, 10, 17))

plot2=hline([9.21e-9] ,color=:red , ls=:dot, label = "Ground truth run B-SD" ,xlabel=L"time(h)", ylabel=L"QmAb (mg/(cell~h))", lw=lws)
plot!(tProcess,result_classic[8], label = "JEKF-Classic",color=:purple, lw=lws )
plot!(tProcess,result_santo[8], label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,result_KPH2[8], label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
annotate!(15, 6e-9, text("B", :left, 10, 17))

plot3=plot(sol2.t,sol2[7,:], color=:red , ls=:dot, label = "Ground truth run B-SD" ,xlabel=L"time(h)", ylabel=L"mAb (mg/L)", lw=lws)
plot!(tProcess,result_classic[7], label = "JEKF-Classic",color=:purple, lw=lws )
plot!(tProcess,result_santo[7], label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,result_KPH2[7], label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
annotate!(15, 500, text("C", :left, 10, 17))

pp=plot(plot1,plot2,plot3, layout=(3,1),size = (900,800))
display(pp)
png("SDT_B_with_MRDE_PC_and_SPECIFIC_P0")

K_MRDE_PC_and_SPECIFIC_P0=plot(tProcess,(result_classic[9]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"\textbf{K}_k~of~QmAb", lw=lws)#, yticks=[0,2e-35])
plot!(tProcess,(result_santo[9]), label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,(result_KPH2[9]), label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:topright)
annotate!(50, 1.13e-17, text("NSEs with MRDE-PC and specific P0", :left, 10, 17))
display(K_MRDE_PC_and_SPECIFIC_P0)

K_MRDE_PC_result_classic=result_classic[9]
K_MRDE_PC_result_santo=result_santo[9]
K_MRDE_PC_result_KPH2=result_KPH2[9]




plot_SE_1=plot(tProcess,(result_classic[10]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"SE~of~X_V", lw=lws,linestyle=:solid)
plot!(tProcess,(result_santo[10]), label = "JEKF-SANTO",color=:blue ,xlabel=L"time(h)", ylabel=L"SE~of~X_V", lw=lws ,linestyle=:dot)
plot!(tProcess,(result_KPH2[10]), label = "JEKF-KPH2",color=:green ,xlabel=L"time(h)", ylabel=L"SE~of~X_V", lw=lws ,linestyle=:dashdot)
plot!(legend=:bottomright, size = (900,400),left_margin=5mm, bottom_margin=5mm)
display(plot_SE_1)
png("SE_Xv_SDT_B_with_MRDE_PC_and_SPECIFIC_P0")


SE_Xv_MRDE_PC_result_classic=result_classic[10]
SE_Xv_MRDE_PC_result_santo=result_santo[10]
SE_Xv_MRDE_PC_result_KPH2=result_KPH2[10]

plot_SE_21=plot(tProcess,(result_classic[11]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"SE~of~QmAb", lw=lws)
plot_SE_22=plot(tProcess,(result_santo[11]), label = "JEKF-SANTO",color=:blue ,xlabel=L"time(h)", ylabel=L"SE~of~QmAb", lw=lws )
plot_SE_23=plot(tProcess,(result_KPH2[11]), label = "JEKF-KPH2",color=:green ,xlabel=L"time(h)", ylabel=L"SE~of~QmAb", lw=lws )
pp=plot(plot_SE_21,plot_SE_22,plot_SE_23, layout=(3,1),size = (900,800))
display(pp)
png("SE_QmAb_SDT_B_with_MRDE_PC_and_SPECIFIC_P0")

plot_SE_31=plot(tProcess,(result_classic[12]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"SE~of~mAb", lw=lws)
plot_SE_32=plot(tProcess,(result_santo[12]), label = "JEKF-SANTO",color=:blue ,xlabel=L"time(h)", ylabel=L"SE~of~mAb", lw=lws )
plot_SE_33=plot(tProcess,(result_KPH2[12]), label = "JEKF-KPH2",color=:green ,xlabel=L"time(h)", ylabel=L"SE~of~mAb", lw=lws )
pp=plot(plot_SE_31,plot_SE_32,plot_SE_33, layout=(3,1),size = (900,800),left_margin=5mm, bottom_margin=5mm)
display(pp)
png("SE_mAb_SDT_B_with_MRDE_PC_and_SPECIFIC_P0")



# plot Innovation magnitude bound test
innovation_error=result_classic[14]
Sk=result_classic[15]
plot1=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-Classic", :left, 10, 13))

innovation_error=result_santo[14]
Sk=result_santo[15]
plot2=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-SANTO", :left, 10, 13))

innovation_error=result_KPH2[14]
Sk=result_KPH2[15]
plot3=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-KPH2", :left, 10, 13))

pp=plot(plot1,plot2,plot3, layout=(3,1),size = (900,800))
display(pp)
# png("IMB-SDT_B_with_MRDE_PC_and_SPECIFIC_P0")
# savefig("IMB-test_"*name*".png")



# plot Innovation magnitude bound test
lws=3.5
gr( xtickfontsize=13, ytickfontsize=13, xguidefontsize=16, yguidefontsize=16, legendfontsize=12);
innovation_error=result_classic[14]
Sk=result_classic[15]
plot1=plot(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-Classic",xlabel=L"time(h)",color=:purple, ylabel=L"Innovation~Error" ,linestyle=:solid, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-Classic",color=:purple ,linestyle=:solid, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-Classic" ,color=:purple,linestyle=:solid, lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-Classic", :left, 10, 13))

innovation_error=result_santo[14]
Sk=result_santo[15]
plot!(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-SANTO",xlabel=L"time(h)", ylabel=L"Innovation~Error" ,color=:blue,linestyle=:dot, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-SANTO" ,color=:blue,linestyle=:dot, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-SANTO" ,color=:blue,linestyle=:dot, lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-SANTO", :left, 10, 13))

innovation_error=result_KPH2[14]
Sk=result_KPH2[15]
plot!(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-KPH2",xlabel=L"time(h)", ylabel=L"Innovation~Error" ,color=:green,linestyle=:dashdot, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-KPH2" ,color=:green,linestyle=:dashdot, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-KPH2",color=:green,linestyle=:dashdot , lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-KPH2", :left, 10, 13))

pp=plot(plot1,size = (1300,500),left_margin=5mm, bottom_margin=5mm)
display(pp)
png("IMB-SDT_B_with_MRDE_PC_and_SPECIFIC_P0")






println("SDT B with MRDE_PC and SPECIFIC P0")
println("RMSPE true mAb vs Classic: ",RMSPE(sol2[7,2:end],result_classic[7]) )
println("RMSPE true mAb vs SANTO: ",RMSPE(sol2[7,2:end],result_santo[7]) )
println("RMSPE true mAb vs KPH2: ",RMSPE(sol2[7,2:end],result_KPH2[7]) )

loss_rmse_santo=[]
loss_rmse_KPH2=[]
for (est_santo, est_KPH2) in zip(result_santo[8][400:end], result_KPH2[8][400:end])
    e=RMSE.([9.21e-9],[est_santo])
    append!(loss_rmse_santo,e)
    e=RMSE.([9.21e-9],[est_KPH2])
    append!(loss_rmse_KPH2,e)
end

# println(" mean(loss_rmse_santo)=",mean(loss_rmse_santo) ," < mean(loss_rmse_KPH2)", mean(loss_rmse_KPH2)," : ",mean(loss_rmse_santo)<mean(loss_rmse_KPH2))
# println("\n Is the mean loss of SANTO significantly less than the mean loss of KPH2  \n H0: mean(loss_rmse_santo) = mean(loss_rmse_KPH2)?
# To answer that, we can perform an asymptotic two-sample Kolmogorov–Smirnov-test of the null hypothesis that
# loss_rmse_santo and loss_rmse_KPH2 are drawn from the same distribution against the alternative
# hypothesis that they come from different distributions.")
# result = ApproximateTwoSampleKSTest(Float64.(loss_rmse_santo),Float64.(loss_rmse_KPH2))
# println(result)
#
# println("\n Based on the last mean (μ_QmAb) and variance (σ2_QmAb) of QmAb estimated by SANTO,
# we can perform an one_sample_t-test of the null hypothesis that high number (1e8) of values
# with mean μ_QmAb and σ2_QmAb come from a distribution with mean μ0 (9.21e-9, ground truth of QmAb)
# against the alternative hypothesis that the distribution does not have mean μ0.")
#
# println("\nSANTO")
# σ2=result_santo[13][end]
# μ=result_santo[8][end]
# println("μ=",μ," σ2=",σ2)
# # estimated_values = rand(Normal(μ,σ2 ), 100000000)
# # result = OneSampleTTest(estimated_values, 9.21e-9)
# result = OneSampleTTest(μ,sqrt(σ2),100000000, 9.21e-9)
# println(result)





















####################################################################################################################################
############ SDT B with MRDE_PU and STANDARD P0 ####################################################################################
####################################################################################################################################
println("\n--------------------------------SDT B with MRDE_PU and STANDARD P0-----------------------------------------------\n")


### experiments with JEKF-classic
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,(9.21e-9 - 7.21e-9)^2]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
# P0[8,1]=0.1 #good noise
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(20e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 1.04, 0.000000000000017]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 0]
result_classic=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PU!)
checking_consistency(result_classic,"classic-SDT_B_with_MRDE_PU_and_STANDARD_P0")

### experiments with SANTO
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,(9.21e-9 - 7.21e-9)^2]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
P0[8,1]=((9.21e-9 - 7.21e-9)^2)/4
P0[1,8]=((9.21e-9 - 7.21e-9)^2)/4
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(20e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 1.04, 0.000000000000017]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 0]
result_santo=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PU!)
checking_consistency(result_classic,"santo-SDT_B_with_MRDE_PU_and_STANDARD_P0")

### experiments with KPH2
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,(9.21e-9 - 7.21e-9)^2]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
# P0[8,1]=0.1 #good noise
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(20e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 1.04, 0.000000000000017]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 1]
result_KPH2=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PU!)
checking_consistency(result_classic,"KPH2-SDT_B_with_MRDE_PU_and_STANDARD_P0")

lws=3.5
gr( xtickfontsize=13, ytickfontsize=13, xguidefontsize=16, yguidefontsize=16, legendfontsize=11);
plot1=plot(tProcess_total,online_Xv_noise_7_5min_Htiter,color="lightblue", ylim = [0, 2.2e9], label = "Xv noise run B-SD", ylabel=L"Xv (Cell/L)" ,xlabel=L"time(h)" , lw=lws)
plot!(tProcess,result_classic[1], label = "JEKF-Classic",color=:purple , lw=lws)
plot!(tProcess,result_santo[1], label = "JEKF-SANTO",color=:blue  , lw=lws)
plot!(tProcess,result_KPH2[1], label = "JEKF-KPH2",color=:green  , lw=lws)
plot!(sol2.t,sol2[1,:],color=:red ,  ls=:dot, label = "Ground truth run B-SD", lw=lws)
plot!(legend=:outertopright)
annotate!(15, 2e9, text("A", :left, 10, 17))

plot2=hline([9.21e-9] ,color=:red , ls=:dot, label = "Ground truth run B-SD" ,xlabel=L"time(h)", ylabel=L"QmAb (mg/(cell~h))", lw=lws)
plot!(tProcess,result_classic[8], label = "JEKF-Classic",color=:purple, lw=lws )
plot!(tProcess,result_santo[8], label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,result_KPH2[8], label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
annotate!(15, 8e-9, text("B", :left, 10, 17))

plot3=plot(sol2.t,sol2[7,:], color=:red , ls=:dot, label = "Ground truth run B-SD" ,xlabel=L"time(h)", ylabel=L"mAb (mg/L)", lw=lws)
plot!(tProcess,result_classic[7], label = "JEKF-Classic",color=:purple, lw=lws )
plot!(tProcess,result_santo[7], label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,result_KPH2[7], label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
annotate!(15, 500, text("C", :left, 10, 17))

pp=plot(plot1,plot2,plot3, layout=(3,1),size = (900,800))
display(pp)
png("SDT_B_with_MRDE_PU_and_STANDARD_P0")

plot_K=plot(tProcess,(result_classic[9]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"Kalman~Gain~of~QmAb", lw=lws)
plot!(tProcess,(result_santo[9]), label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,(result_KPH2[9]), label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
display(plot_K)

plot_SE_1=plot(tProcess,(result_classic[10]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"Standard~Error~of~Xv", lw=lws)
plot!(tProcess,(result_santo[10]), label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,(result_KPH2[10]), label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
display(plot_SE_1)

plot_SE_2=plot(tProcess,(result_classic[11]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"Standard~Error~of~QmAb", lw=lws)
plot!(tProcess,(result_santo[11]), label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,(result_KPH2[11]), label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
display(plot_SE_2)

plot_SE_3=plot(tProcess,(result_classic[12]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"Standard~Error~of~mAb", lw=lws)
plot!(tProcess,(result_santo[12]), label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,(result_KPH2[12]), label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
display(plot_SE_3)


# plot Innovation magnitude bound test
innovation_error=result_classic[14]
Sk=result_classic[15]
plot1=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-Classic", :left, 10, 13))

innovation_error=result_santo[14]
Sk=result_santo[15]
plot2=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-SANTO", :left, 10, 13))

innovation_error=result_KPH2[14]
Sk=result_KPH2[15]
plot3=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-KPH2", :left, 10, 13))

pp=plot(plot1,plot2,plot3, layout=(3,1),size = (900,800))
display(pp)
# png("IMB-SDT_B_with_MRDE_PU_and_STANDARD_P0")




# plot Innovation magnitude bound test
lws=3.5
gr( xtickfontsize=13, ytickfontsize=13, xguidefontsize=16, yguidefontsize=16, legendfontsize=12);
innovation_error=result_classic[14]
Sk=result_classic[15]
plot1=plot(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-Classic",xlabel=L"time(h)",color=:purple, ylabel=L"Innovation~Error" ,linestyle=:solid, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-Classic",color=:purple ,linestyle=:solid, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-Classic" ,color=:purple,linestyle=:solid, lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-Classic", :left, 10, 13))

innovation_error=result_santo[14]
Sk=result_santo[15]
plot!(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-SANTO",xlabel=L"time(h)", ylabel=L"Innovation~Error" ,color=:blue,linestyle=:dot, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-SANTO" ,color=:blue,linestyle=:dot, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-SANTO" ,color=:blue,linestyle=:dot, lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-SANTO", :left, 10, 13))

innovation_error=result_KPH2[14]
Sk=result_KPH2[15]
plot!(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-KPH2",xlabel=L"time(h)", ylabel=L"Innovation~Error" ,color=:green,linestyle=:dashdot, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-KPH2" ,color=:green,linestyle=:dashdot, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-KPH2",color=:green,linestyle=:dashdot , lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-KPH2", :left, 10, 13))

pp=plot(plot1,size = (1300,500),left_margin=5mm, bottom_margin=5mm)
display(pp)
png("IMB-SDT_B_with_MRDE_PU_and_STANDARD_P0")





println("SDT B with MRDE_PU and STANDARD P0")
println("RMSPE true mAb vs Classic: ",RMSPE(sol2[7,2:end],result_classic[7]) )
println("RMSPE true mAb vs SANTO: ",RMSPE(sol2[7,2:end],result_santo[7]) )
println("RMSPE true mAb vs KPH2: ",RMSPE(sol2[7,2:end],result_KPH2[7]) )

plotNEES=hline([7.815] ,color=:red , ls=:dot, label = L"Upper~limit~of~\chi^2_{3}(0.95)" ,xlabel=L"time(h)", ylabel=L"NEES", lw=lws)
plot!(tProcess,result_santo[end], label="JEKF-SANTO",color=:blue,lw=lws)
plot!(tProcess,result_KPH2[end], label="JEKF-KPH2",color=:green,lw=lws)
plot!(legend=:outertopright,size = (900,600))







#
# plot(result_classic[end])
# plot!(result_santo[end])
# plot!(result_KPH2[end])
#




####################################################################################################################################
############ SDT B with MRDE_PU and SPECIFIC P0 ####################################################################################
####################################################################################################################################
println("\n--------------------------------SDT B with MRDE_PU and SPECIFIC P0-----------------------------------------------\n")

### experiments with JEKF-classic
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,(9.21e-9 - 7.21e-9)^2]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
# P0[8,1]=0.1 #good noise
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(20e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 1.04, 0.000000000000017]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 0]
result_classic=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PU!)
checking_consistency(result_classic,"classic-SDT_B_with_MRDE_PU_and_SPECIFIC_P0")

### experiments with SANTO
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,(9.21e-9 - 7.21e-9)^2]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
P0[8,1]=0.1445 #0.1445
P0[1,8]=0.1445
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(20e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 1.7, 1e-9]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 0]
result_santo=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PU!)
checking_consistency(result_santo,"santo-SDT_B_with_MRDE_PU_and_SPECIFIC_P0")
plotNEES_MRDE_PU=result_santo[end]

### experiments with KPH2
X0=[2e8  ,  2e8 ,   29.1 ,  4.9 , 0.0 , 0.310, 80.6,7.21e-9]
P0 = Diagonal([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,11.97e-2]) # Initial Process Estimation / Initial Estimation Error Covariance Matrix
P0 = Matrix(P0)
# P0[8,1]=0.1 #good noise
ic = [X0;P0[:]] # Combined initial value vector
R2=(20e7)^2  #measurement noise covariance ground truth
Q=[(20e6)^2, 0.001,0.001,0.001, 0.001, 0.001, 20300.9, 0.001]#[(10e1)^2, 0.1^2,0.1^2,0.1^2, 0.1^2, 0.1^2, 0.1^2, 0.1^2][20e7,0.001,0.001,0.001, 0.001, 0.001, 0.001, 0.001]
p_Q = Diagonal(Q)
H = [1 0 0 0 0 0 0 1]
result_KPH2=EKF(R2,p_Q,ic,H,online_Xv_noise_7_5min_Htiter,process_model_and_MRDE_PU!)
checking_consistency(result_KPH2,"KPH2-SDT_B_with_MRDE_PU_and_SPECIFIC_P0")

lws=3.5
gr( xtickfontsize=13, ytickfontsize=13, xguidefontsize=16, yguidefontsize=16, legendfontsize=11);
plot1=plot(tProcess_total,online_Xv_noise_7_5min_Htiter,color="lightblue", ylim = [0, 2.2e9], label = "Xv noise run B-SD", ylabel=L"Xv (Cell/L)" ,xlabel=L"time(h)" , lw=lws)
plot!(tProcess,result_classic[1], label = "JEKF-Classic",color=:purple , lw=lws)
plot!(tProcess,result_santo[1], label = "JEKF-SANTO",color=:blue  , lw=lws)
plot!(tProcess,result_KPH2[1], label = "JEKF-KPH2",color=:green  , lw=lws)
plot!(sol2.t,sol2[1,:],color=:red ,  ls=:dot, label = "Ground truth run B-SD", lw=lws)
plot!(legend=:outertopright)
annotate!(15, 2e9, text("A", :left, 10, 17))

plot2=hline([9.21e-9] ,color=:red , ls=:dot, label = "Ground truth run B-SD" ,xlabel=L"time(h)", ylabel=L"QmAb (mg/(cell~h))", lw=lws)
plot!(tProcess,result_classic[8], label = "JEKF-Classic",color=:purple, lw=lws )
plot!(tProcess,result_santo[8], label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,result_KPH2[8], label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
annotate!(15, 8e-9, text("B", :left, 10, 17))

plot3=plot(sol2.t,sol2[7,:], color=:red , ls=:dot, label = "Ground truth run B-SD" ,xlabel=L"time(h)", ylabel=L"mAb (mg/L)", lw=lws)
plot!(tProcess,result_classic[7], label = "JEKF-Classic",color=:purple, lw=lws )
plot!(tProcess,result_santo[7], label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,result_KPH2[7], label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:outertopright)
annotate!(15, 500, text("C", :left, 10, 17))

pp=plot(plot1,plot2,plot3, layout=(3,1),size = (900,800))
display(pp)
png("SDT_B_with_MRDE_PU_and_SPECIFIC_P0")


plot_K_MRDE_PC_and_SPECIFIC_P0=plot(tProcess,K_MRDE_PC_result_classic, label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"\textbf{K}_k~of~QmAb", lw=lws)
plot!(tProcess,K_MRDE_PC_result_santo, label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,K_MRDE_PC_result_KPH2, label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:topright)
annotate!(-2.6, 0, text("0", :left, 10, 12))
annotate!(25, 1.13e-17, text(L"NSEs~with~MRDE-PC~and~specific~\textbf{P}(0)", :left, 10, 13))

plot_K_MRDE_PU_and_SPECIFIC_P0=plot(tProcess,(result_classic[9]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"\textbf{K}_k~of~QmAb", lw=lws, ylims=[0,3.4e-18])
plot!(tProcess,(result_santo[9]), label = "JEKF-SANTO",color=:blue , lw=lws )
plot!(tProcess,(result_KPH2[9]), label = "JEKF-KPH2",color=:green , lw=lws )
plot!(legend=:topright)
annotate!(25, 1.13e-18, text(L"NSEs~with~MRDE-PU~and~specific~\textbf{P}(0)", :left, 10, 13))

pp=plot(plot_K_MRDE_PC_and_SPECIFIC_P0,plot_K_MRDE_PU_and_SPECIFIC_P0, layout=(2,1),size = (800,700),left_margin=3mm, bottom_margin=2mm,top_margin=9mm)
# savefig(abs_path*"/JEKF-SANTO/results_analyze/figs/real_dt/estimations_RD_Puncorrelated_sp0.png")

display(pp)
png("kalman_gain_SDT")




plot_SE_1=plot(tProcess,(result_classic[10]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"SE~of~X_V", lw=lws,linestyle=:solid)
plot!(tProcess,(result_santo[10]), label = "JEKF-SANTO",color=:blue ,xlabel=L"time(h)", ylabel=L"SE~of~X_V", lw=lws ,linestyle=:dot)
plot!(tProcess,(result_KPH2[10]), label = "JEKF-KPH2",color=:green ,xlabel=L"time(h)", ylabel=L"SE~of~X_V", lw=lws ,linestyle=:dashdot)
plot!(legend=:bottomright, size = (900,400),left_margin=5mm, bottom_margin=5mm)
display(plot_SE_1)
png("SE_Xv_SDT_B_with_MRDE_PU_and_SPECIFIC_P0")


plot_SE_21=plot(tProcess,(result_classic[11]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"SE~of~QmAb", lw=lws)
plot_SE_22=plot(tProcess,(result_santo[11]), label = "JEKF-SANTO",color=:blue ,xlabel=L"time(h)", ylabel=L"SE~of~QmAb", lw=lws )
plot_SE_23=plot(tProcess,(result_KPH2[11]), label = "JEKF-KPH2",color=:green ,xlabel=L"time(h)", ylabel=L"SE~of~QmAb", lw=lws )
pp=plot(plot_SE_21,plot_SE_22,plot_SE_23, layout=(3,1),size = (900,800))
display(pp)
png("SE_QmAb_SDT_B_with_MRDE_PU_and_SPECIFIC_P0")

plot_SE_31=plot(tProcess,(result_classic[12]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"SE~of~mAb", lw=lws)
plot_SE_32=plot(tProcess,(result_santo[12]), label = "JEKF-SANTO",color=:blue ,xlabel=L"time(h)", ylabel=L"SE~of~mAb", lw=lws )
plot_SE_33=plot(tProcess,(result_KPH2[12]), label = "JEKF-KPH2",color=:green ,xlabel=L"time(h)", ylabel=L"SE~of~mAb", lw=lws )
pp=plot(plot_SE_31,plot_SE_32,plot_SE_33, layout=(3,1),size = (900,800),left_margin=5mm, bottom_margin=5mm)
display(pp)
png("SE_mAb_SDT_B_with_MRDE_PU_and_SPECIFIC_P0")



# plot_SE_1=plot(tProcess,(result_classic[10]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"Standard~Error~of~Xv", lw=lws)
# plot!(tProcess,(result_santo[10]), label = "JEKF-SANTO",color=:blue , lw=lws )
# plot!(tProcess,(result_KPH2[10]), label = "JEKF-KPH2",color=:green , lw=lws )
# plot!(legend=:outertopright)
# display(plot_SE_1)
#
# plot_SE_2=plot(tProcess,(result_classic[11]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"Standard~Error~of~QmAb", lw=lws)
# plot!(tProcess,(result_santo[11]), label = "JEKF-SANTO",color=:blue , lw=lws )
# plot!(tProcess,(result_KPH2[11]), label = "JEKF-KPH2",color=:green , lw=lws )
# plot!(legend=:outertopright)
# display(plot_SE_2)
#
# plot_SE_3=plot(tProcess,(result_classic[12]), label = "JEKF-Classic",color=:purple ,xlabel=L"time(h)", ylabel=L"Standard~Error~of~mAb", lw=lws)
# plot!(tProcess,(result_santo[12]), label = "JEKF-SANTO",color=:blue , lw=lws )
# plot!(tProcess,(result_KPH2[12]), label = "JEKF-KPH2",color=:green , lw=lws )
# plot!(legend=:outertopright)
# display(plot_SE_3)

# plot Innovation magnitude bound test
innovation_error=result_classic[14]
Sk=result_classic[15]
plot1=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-Classic", :left, 10, 13))

innovation_error=result_santo[14]
Sk=result_santo[15]
plot2=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-SANTO", :left, 10, 13))

innovation_error=result_KPH2[14]
Sk=result_KPH2[15]
plot3=plot(tProcess,innovation_error,label="Innovation error",xlabel=L"time(h)", ylabel=L"Innovation~Error" )
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}" )
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}" )
plot!(legend=:outertopright)
annotate!(75, 6.7e8, text("JEKF-KPH2", :left, 10, 13))

pp=plot(plot1,plot2,plot3, layout=(3,1),size = (900,800))
display(pp)
# png("IMB-SDT_B_with_MRDE_PU_and_SPECIFIC_P0")




# plot Innovation magnitude bound test
lws=3.5
gr( xtickfontsize=13, ytickfontsize=13, xguidefontsize=16, yguidefontsize=16, legendfontsize=12);
innovation_error=result_classic[14]
Sk=result_classic[15]
plot1=plot(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-Classic",xlabel=L"time(h)",color=:purple, ylabel=L"Innovation~Error" ,linestyle=:solid, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-Classic",color=:purple ,linestyle=:solid, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-Classic" ,color=:purple,linestyle=:solid, lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-Classic", :left, 10, 13))

innovation_error=result_santo[14]
Sk=result_santo[15]
plot!(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-SANTO",xlabel=L"time(h)", ylabel=L"Innovation~Error" ,color=:blue,linestyle=:dot, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-SANTO" ,color=:blue,linestyle=:dot, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-SANTO" ,color=:blue,linestyle=:dot, lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-SANTO", :left, 10, 13))

innovation_error=result_KPH2[14]
Sk=result_KPH2[15]
plot!(tProcess,innovation_error,label=L"Innovation~error~of~JEKF-KPH2",xlabel=L"time(h)", ylabel=L"Innovation~Error" ,color=:green,linestyle=:dashdot, lw=lws)
plot!(tProcess,2*sqrt.(Sk), label=L"+2\sqrt{S_k}~of~JEKF-KPH2" ,color=:green,linestyle=:dashdot, lw=lws)
plot!(tProcess,-2*sqrt.(Sk), label=L"-2\sqrt{S_k}~of~JEKF-KPH2",color=:green,linestyle=:dashdot , lw=lws)
plot!(legend=:outertopright)
# annotate!(75, 6.7e8, text("JEKF-KPH2", :left, 10, 13))

pp=plot(plot1,size = (1300,500),left_margin=5mm, bottom_margin=5mm)
display(pp)
png("IMB-SDT_B_with_MRDE_PU_and_SPECIFIC_P0")




println("SDT B with MRDE_PU and SPECIFIC P0")
println("RMSPE true mAb vs Classic: ",RMSPE(sol2[7,2:end],result_classic[7]) )
println("RMSPE true mAb vs SANTO: ",RMSPE(sol2[7,2:end],result_santo[7]) )
println("RMSPE true mAb vs KPH2: ",RMSPE(sol2[7,2:end],result_KPH2[7]) )

loss_rmse_santo=[]
loss_rmse_KPH2=[]
for (est_santo, est_KPH2) in zip(result_santo[8][400:end], result_KPH2[8][400:end])
    e=RMSE.([9.21e-9],[est_santo])
    append!(loss_rmse_santo,e)
    e=RMSE.([9.21e-9],[est_KPH2])
    append!(loss_rmse_KPH2,e)
end

# println(" mean(loss_rmse_santo)=",mean(loss_rmse_santo) ," < mean(loss_rmse_KPH2)", mean(loss_rmse_KPH2)," : ",mean(loss_rmse_santo)<mean(loss_rmse_KPH2))
# println("\n Is the mean loss of SANTO significantly less than the mean loss of KPH2  \n H0: mean(loss_rmse_santo) = mean(loss_rmse_KPH2)?
# To answer that, we can perform an asymptotic two-sample Kolmogorov–Smirnov-test of the null hypothesis that
# loss_rmse_santo and loss_rmse_KPH2 are drawn from the same distribution against the alternative
# hypothesis that they come from different distributions.")
# result = ApproximateTwoSampleKSTest(Float64.(loss_rmse_santo),Float64.(loss_rmse_KPH2))
# println(result)
#
# println("\n Based on the last mean (μ_QmAb) and variance (σ2_QmAb) of QmAb estimated by SANTO,
# we can perform an one_sample_t-test of the null hypothesis that high number (1e8) of values
# with mean μ_QmAb and variance σ2_QmAb come from a distribution with mean μ0 (9.21e-9, ground truth of QmAb)
# against the alternative hypothesis that the distribution does not have mean μ0.")
#
# println("\nSANTO")
# σ2=result_santo[13][end]
# μ=result_santo[8][end]
# println("μ=",μ," σ2=",σ2)
# # estimated_values = rand(Normal(μ,σ2 ), 100000000)
# # result = OneSampleTTest(estimated_values, 9.21e-9)
# result = OneSampleTTest(μ,sqrt(σ2),100000000, 9.21e-9)
# println(result)

lws=3.
NEES_plot=hline([7.815] ,color=:black , ls=:dot, label = L"Upper~limit~of~\chi^2_{3}(0.95)" ,xlabel=L"time(h)", ylabel=L"NEES", lw=lws)
plot!(tProcess,plotNEES_MRDE_PU, label="MRDE-PU with specific P(0)",color=:PiYG_4,lw=lws)
plot!(tProcess,plotNEES_MRDE_PC, label="MRDE-PC with specific P(0)",color=:Set2_3,lw=lws)
plot!(legend=:outertopright,size = (900,400),left_margin=5mm, bottom_margin=5mm)
display(NEES_plot)
png("NEES_plot")
